
TB_Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ac  080051ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b4  080051b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  20000070  0800522c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  0800522c  00020ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df53  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237a  00000000  00000000  0002e036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000303b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af9  00000000  00000000  000311f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001866c  00000000  00000000  00031ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109ff  00000000  00000000  0004a355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009df7d  00000000  00000000  0005ad54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004670  00000000  00000000  000f8cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fd344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005120 	.word	0x08005120

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005120 	.word	0x08005120

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000592:	f000 fc37 	bl	8000e04 <HAL_Init>

	/* USER CODE BEGIN Init */
	initialise_monitor_handles();
 8000596:	f003 fe0f 	bl	80041b8 <initialise_monitor_handles>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059a:	f000 f889 	bl	80006b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800059e:	f000 fa0b 	bl	80009b8 <MX_GPIO_Init>
	MX_DMA_Init();
 80005a2:	f000 f9e9 	bl	8000978 <MX_DMA_Init>
	MX_ADC1_Init();
 80005a6:	f000 f8e3 	bl	8000770 <MX_ADC1_Init>
	MX_RTC_Init();
 80005aa:	f000 f933 	bl	8000814 <MX_RTC_Init>
	MX_TIM3_Init();
 80005ae:	f000 f995 	bl	80008dc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_PWR_EnableSleepOnExit();
 80005b2:	f001 ff09 	bl	80023c8 <HAL_PWR_EnableSleepOnExit>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80005b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005ba:	f001 febb 	bl	8002334 <HAL_PWR_EnableWakeUpPin>
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <main+0x100>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f06f 0201 	mvn.w	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80005c8:	4b31      	ldr	r3, [pc, #196]	; (8000690 <main+0x104>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a30      	ldr	r2, [pc, #192]	; (8000690 <main+0x104>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6013      	str	r3, [r2, #0]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <main+0x108>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <main+0x108>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80005e4:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim3);
 80005e6:	4829      	ldr	r0, [pc, #164]	; (800068c <main+0x100>)
 80005e8:	f002 ffd6 	bl	8003598 <HAL_TIM_Base_Start_IT>

	uint32_t counter_tim = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4829      	ldr	r0, [pc, #164]	; (8000694 <main+0x108>)
 80005f0:	f002 ff6a 	bl	80034c8 <HAL_RTCEx_BKUPRead>
 80005f4:	6078      	str	r0, [r7, #4]
	uint32_t last_val = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80005f6:	2102      	movs	r1, #2
 80005f8:	4826      	ldr	r0, [pc, #152]	; (8000694 <main+0x108>)
 80005fa:	f002 ff65 	bl	80034c8 <HAL_RTCEx_BKUPRead>
 80005fe:	6038      	str	r0, [r7, #0]

	printf("TIM: %lu\n", counter_tim);
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4825      	ldr	r0, [pc, #148]	; (8000698 <main+0x10c>)
 8000604:	f003 ff16 	bl	8004434 <iprintf>

	if (counter_tim > 5000) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f241 3288 	movw	r2, #5000	; 0x1388
 800060e:	4293      	cmp	r3, r2
 8000610:	d907      	bls.n	8000622 <main+0x96>
		HAL_GPIO_WritePin(LED_END_GPIO_Port, LED_END_Pin, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4820      	ldr	r0, [pc, #128]	; (800069c <main+0x110>)
 800061a:	f001 fe71 	bl	8002300 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTANDBYMode();
 800061e:	f001 febb 	bl	8002398 <HAL_PWR_EnterSTANDBYMode>
	}

	if (HAL_GPIO_ReadPin(WKUP_GPIO_Port, WKUP_Pin) == 1) {
 8000622:	2101      	movs	r1, #1
 8000624:	481e      	ldr	r0, [pc, #120]	; (80006a0 <main+0x114>)
 8000626:	f001 fe53 	bl	80022d0 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	d10b      	bne.n	8000648 <main+0xbc>
		HAL_GPIO_WritePin(LED_END_GPIO_Port, LED_END_Pin, 1);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	4819      	ldr	r0, [pc, #100]	; (800069c <main+0x110>)
 8000638:	f001 fe62 	bl	8002300 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFI);
 800063c:	2101      	movs	r1, #1
 800063e:	2000      	movs	r0, #0
 8000640:	f001 fe8a 	bl	8002358 <HAL_PWR_EnterSLEEPMode>
		HAL_PWR_EnterSTANDBYMode();
 8000644:	f001 fea8 	bl	8002398 <HAL_PWR_EnterSTANDBYMode>
	}

	HAL_GPIO_WritePin(LED_END_GPIO_Port, LED_END_Pin, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <main+0x110>)
 8000650:	f001 fe56 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, &buff, NUMBER_OF_SAMPLES);
 8000654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000658:	4912      	ldr	r1, [pc, #72]	; (80006a4 <main+0x118>)
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <main+0x11c>)
 800065c:	f000 fc88 	bl	8000f70 <HAL_ADC_Start_DMA>

	//pritnf("ADC: %lu\n", current_val);

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, current_val);
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0x120>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	2102      	movs	r1, #2
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <main+0x108>)
 800066a:	f002 ff13 	bl	8003494 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, (counter_tim + 1));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0x108>)
 8000678:	f002 ff0c 	bl	8003494 <HAL_RTCEx_BKUPWrite>
	HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFI);
 800067c:	2101      	movs	r1, #1
 800067e:	2000      	movs	r0, #0
 8000680:	f001 fe6a 	bl	8002358 <HAL_PWR_EnterSLEEPMode>
	HAL_PWR_EnterSTANDBYMode();
 8000684:	f001 fe88 	bl	8002398 <HAL_PWR_EnterSTANDBYMode>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000688:	e7fe      	b.n	8000688 <main+0xfc>
 800068a:	bf00      	nop
 800068c:	20000154 	.word	0x20000154
 8000690:	40007000 	.word	0x40007000
 8000694:	20000134 	.word	0x20000134
 8000698:	08005138 	.word	0x08005138
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020000 	.word	0x40020000
 80006a4:	2000019c 	.word	0x2000019c
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	200009a0 	.word	0x200009a0

080006b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 ff0d 	bl	80044de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <SystemClock_Config+0xb8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a22      	ldr	r2, [pc, #136]	; (8000768 <SystemClock_Config+0xb8>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <SystemClock_Config+0xb8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <SystemClock_Config+0xbc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1c      	ldr	r2, [pc, #112]	; (800076c <SystemClock_Config+0xbc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <SystemClock_Config+0xbc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800070c:	230a      	movs	r3, #10
 800070e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fe6f 	bl	8002408 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000730:	f000 f9ae 	bl	8000a90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f8d2 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800075a:	f000 f999 	bl	8000a90 <Error_Handler>
	}
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_ADC1_Init+0x98>)
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <MX_ADC1_Init+0x9c>)
 8000786:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_ADC1_Init+0x98>)
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_ADC1_Init+0xa0>)
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_ADC1_Init+0x98>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <MX_ADC1_Init+0x98>)
 80007d0:	f000 fb8a 	bl	8000ee8 <HAL_ADC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80007da:	f000 f959 	bl	8000a90 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80007de:	2301      	movs	r3, #1
 80007e0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_ADC1_Init+0x98>)
 80007f0:	f000 fcb8 	bl	8001164 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 80007fa:	f000 f949 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000008c 	.word	0x2000008c
 800080c:	40012000 	.word	0x40012000
 8000810:	0f000001 	.word	0x0f000001

08000814 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_RTC_Init+0xc0>)
 800082e:	4a2a      	ldr	r2, [pc, #168]	; (80008d8 <MX_RTC_Init+0xc4>)
 8000830:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_RTC_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_RTC_Init+0xc0>)
 800083a:	227f      	movs	r2, #127	; 0x7f
 800083c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_RTC_Init+0xc0>)
 8000840:	22ff      	movs	r2, #255	; 0xff
 8000842:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_RTC_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_RTC_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_RTC_Init+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000856:	481f      	ldr	r0, [pc, #124]	; (80008d4 <MX_RTC_Init+0xc0>)
 8000858:	f002 faea 	bl	8002e30 <HAL_RTC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_RTC_Init+0x52>
	{
		Error_Handler();
 8000862:	f000 f915 	bl	8000a90 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000866:	2300      	movs	r3, #0
 8000868:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800086a:	2300      	movs	r3, #0
 800086c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800086e:	2300      	movs	r3, #0
 8000870:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_RTC_Init+0xc0>)
 8000882:	f002 fb58 	bl	8002f36 <HAL_RTC_SetTime>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_RTC_Init+0x7c>
	{
		Error_Handler();
 800088c:	f000 f900 	bl	8000a90 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000890:	2301      	movs	r3, #1
 8000892:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8000894:	2301      	movs	r3, #1
 8000896:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8000898:	2301      	movs	r3, #1
 800089a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 800089c:	2300      	movs	r3, #0
 800089e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	2201      	movs	r2, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_RTC_Init+0xc0>)
 80008a8:	f002 fbdf 	bl	800306a <HAL_RTC_SetDate>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_RTC_Init+0xa2>
	{
		Error_Handler();
 80008b2:	f000 f8ed 	bl	8000a90 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 15, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80008b6:	2204      	movs	r2, #4
 80008b8:	210f      	movs	r1, #15
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_RTC_Init+0xc0>)
 80008bc:	f002 fcfa 	bl	80032b4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_RTC_Init+0xb6>
	{
		Error_Handler();
 80008c6:	f000 f8e3 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000134 	.word	0x20000134
 80008d8:	40002800 	.word	0x40002800

080008dc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM3_Init+0x94>)
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <MX_TIM3_Init+0x98>)
 80008fc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16000-1;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_TIM3_Init+0x94>)
 8000900:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000904:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM3_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 5000-1;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_TIM3_Init+0x94>)
 800090e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000912:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_TIM3_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM3_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_TIM3_Init+0x94>)
 8000922:	f002 fde9 	bl	80034f8 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 800092c:	f000 f8b0 	bl	8000a90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_TIM3_Init+0x94>)
 800093e:	f002 ff7d 	bl	800383c <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000948:	f000 f8a2 	bl	8000a90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_TIM3_Init+0x94>)
 800095a:	f003 f985 	bl	8003c68 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000964:	f000 f894 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000154 	.word	0x20000154
 8000974:	40000400 	.word	0x40000400

08000978 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_DMA_Init+0x3c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <MX_DMA_Init+0x3c>)
 8000988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_DMA_Init+0x3c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2038      	movs	r0, #56	; 0x38
 80009a0:	f000 ff6b 	bl	800187a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009a4:	2038      	movs	r0, #56	; 0x38
 80009a6:	f000 ff84 	bl	80018b2 <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x80>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <MX_GPIO_Init+0x80>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_GPIO_Init+0x80>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_GPIO_Init+0x80>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <MX_GPIO_Init+0x80>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_GPIO_Init+0x80>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_Pin|LED_END_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <MX_GPIO_Init+0x84>)
 8000a0e:	f001 fc77 	bl	8002300 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_Pin LED_END_Pin */
	GPIO_InitStruct.Pin = LED_Pin|LED_END_Pin;
 8000a12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a16:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x84>)
 8000a2c:	f001 facc 	bl	8001fc8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc) {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	for (uint8_t i; i>NUMBER_OF_SAMPLES ;i++) {
 8000a5c:	bf00      	nop
		adc_sum = adc_sum + buff[i];
	}
	current_val = adc_sum / NUMBER_OF_SAMPLES;
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_ADC_ConvCpltCallback+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	0a9b      	lsrs	r3, r3, #10
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_ADC_ConvCpltCallback+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	2000099c 	.word	0x2000099c
 8000a78:	200009a0 	.word	0x200009a0

08000a7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	HAL_PWR_DisableSleepOnExit();
 8000a84:	f001 fcb0 	bl	80023e8 <HAL_PWR_DisableSleepOnExit>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a2e      	ldr	r2, [pc, #184]	; (8000bc4 <HAL_ADC_MspInit+0xd8>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d156      	bne.n	8000bbc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_ADC_MspInit+0xdc>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <HAL_ADC_MspInit+0xdc>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_ADC_MspInit+0xdc>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <HAL_ADC_MspInit+0xdc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <HAL_ADC_MspInit+0xdc>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <HAL_ADC_MspInit+0xdc>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <HAL_ADC_MspInit+0xe0>)
 8000b5a:	f001 fa35 	bl	8001fc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b60:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <HAL_ADC_MspInit+0xe8>)
 8000b62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000ba2:	f000 fea1 	bl	80018e8 <HAL_DMA_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000bac:	f7ff ff70 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_ADC_MspInit+0xe4>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40012000 	.word	0x40012000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	200000d4 	.word	0x200000d4
 8000bd4:	40026410 	.word	0x40026410

08000bd8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_RTC_MspInit+0x60>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d119      	bne.n	8000c30 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c04:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 f820 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c16:	f7ff ff3b 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_RTC_MspInit+0x64>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 fe28 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 fe41 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40002800 	.word	0x40002800
 8000c3c:	42470e3c 	.word	0x42470e3c

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d115      	bne.n	8000c7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_TIM_Base_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_TIM_Base_MspInit+0x4c>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_TIM_Base_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	201d      	movs	r0, #29
 8000c74:	f000 fe01 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c78:	201d      	movs	r0, #29
 8000c7a:	f000 fe1a 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40000400 	.word	0x40000400
 8000c8c:	40023800 	.word	0x40023800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8e4 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <RTC_WKUP_IRQHandler+0x10>)
 8000cea:	f002 fba5 	bl	8003438 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000134 	.word	0x20000134

08000cf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM3_IRQHandler+0x10>)
 8000cfe:	f002 fcad 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000154 	.word	0x20000154

08000d0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <DMA2_Stream0_IRQHandler+0x10>)
 8000d12:	f000 feef 	bl	8001af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000d4 	.word	0x200000d4

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f003 fc14 	bl	800457c <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20020000 	.word	0x20020000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	200009a4 	.word	0x200009a4
 8000d88:	20000ba8 	.word	0x20000ba8

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db4:	f7ff ffea 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	; (8000dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f003 fbd3 	bl	8004588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fbd3 	bl	800058c <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df4:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 8000df8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dfc:	20000ba4 	.word	0x20000ba4

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 fd19 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 f808 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fe30 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fd31 	bl	80018ce <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 fcf9 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200009a8 	.word	0x200009a8

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200009a8 	.word	0x200009a8

08000ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e033      	b.n	8000f66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d109      	bne.n	8000f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fdf0 	bl	8000aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d118      	bne.n	8000f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f2e:	f023 0302 	bic.w	r3, r3, #2
 8000f32:	f043 0202 	orr.w	r2, r3, #2
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fa44 	bl	80013c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f023 0303 	bic.w	r3, r3, #3
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	e001      	b.n	8000f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_ADC_Start_DMA+0x1e>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e0ce      	b.n	800112c <HAL_ADC_Start_DMA+0x1bc>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d018      	beq.n	8000fd6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb4:	4b5f      	ldr	r3, [pc, #380]	; (8001134 <HAL_ADC_Start_DMA+0x1c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a5f      	ldr	r2, [pc, #380]	; (8001138 <HAL_ADC_Start_DMA+0x1c8>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0c9a      	lsrs	r2, r3, #18
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fe4:	d107      	bne.n	8000ff6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ff4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	f040 8086 	bne.w	8001112 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001030:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001044:	d106      	bne.n	8001054 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f023 0206 	bic.w	r2, r3, #6
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
 8001052:	e002      	b.n	800105a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <HAL_ADC_Start_DMA+0x1cc>)
 8001064:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106a:	4a35      	ldr	r2, [pc, #212]	; (8001140 <HAL_ADC_Start_DMA+0x1d0>)
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <HAL_ADC_Start_DMA+0x1d4>)
 8001074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	4a33      	ldr	r2, [pc, #204]	; (8001148 <HAL_ADC_Start_DMA+0x1d8>)
 800107c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001086:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001096:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	334c      	adds	r3, #76	; 0x4c
 80010b2:	4619      	mov	r1, r3
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f000 fcc4 	bl	8001a44 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d129      	bne.n	800112a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	e020      	b.n	800112a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_ADC_Start_DMA+0x1dc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d11b      	bne.n	800112a <HAL_ADC_Start_DMA+0x1ba>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d114      	bne.n	800112a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	e00b      	b.n	800112a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f043 0210 	orr.w	r2, r3, #16
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	431bde83 	.word	0x431bde83
 800113c:	40012300 	.word	0x40012300
 8001140:	080015c1 	.word	0x080015c1
 8001144:	0800167b 	.word	0x0800167b
 8001148:	08001697 	.word	0x08001697
 800114c:	40012000 	.word	0x40012000

08001150 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1c>
 800117c:	2302      	movs	r3, #2
 800117e:	e113      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x244>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b09      	cmp	r3, #9
 800118e:	d925      	bls.n	80011dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68d9      	ldr	r1, [r3, #12]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	3b1e      	subs	r3, #30
 80011a6:	2207      	movs	r2, #7
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43da      	mvns	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	400a      	ands	r2, r1
 80011b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d9      	ldr	r1, [r3, #12]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4403      	add	r3, r0
 80011ce:	3b1e      	subs	r3, #30
 80011d0:	409a      	lsls	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	e022      	b.n	8001222 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6919      	ldr	r1, [r3, #16]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	2207      	movs	r2, #7
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	400a      	ands	r2, r1
 80011fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6919      	ldr	r1, [r3, #16]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	4603      	mov	r3, r0
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4403      	add	r3, r0
 8001218:	409a      	lsls	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b06      	cmp	r3, #6
 8001228:	d824      	bhi.n	8001274 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	3b05      	subs	r3, #5
 800123c:	221f      	movs	r2, #31
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	400a      	ands	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	3b05      	subs	r3, #5
 8001266:	fa00 f203 	lsl.w	r2, r0, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
 8001272:	e04c      	b.n	800130e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b0c      	cmp	r3, #12
 800127a:	d824      	bhi.n	80012c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	3b23      	subs	r3, #35	; 0x23
 800128e:	221f      	movs	r2, #31
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43da      	mvns	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	400a      	ands	r2, r1
 800129c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b23      	subs	r3, #35	; 0x23
 80012b8:	fa00 f203 	lsl.w	r2, r0, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	631a      	str	r2, [r3, #48]	; 0x30
 80012c4:	e023      	b.n	800130e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b41      	subs	r3, #65	; 0x41
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3b41      	subs	r3, #65	; 0x41
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_ADC_ConfigChannel+0x250>)
 8001310:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <HAL_ADC_ConfigChannel+0x254>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d10f      	bne.n	800133c <HAL_ADC_ConfigChannel+0x1d8>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b12      	cmp	r3, #18
 8001322:	d10b      	bne.n	800133c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_ADC_ConfigChannel+0x254>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12b      	bne.n	800139e <HAL_ADC_ConfigChannel+0x23a>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_ADC_ConfigChannel+0x258>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_ADC_ConfigChannel+0x1f4>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b11      	cmp	r3, #17
 8001356:	d122      	bne.n	800139e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_ADC_ConfigChannel+0x258>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d111      	bne.n	800139e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_ADC_ConfigChannel+0x25c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_ADC_ConfigChannel+0x260>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	0c9a      	lsrs	r2, r3, #18
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001390:	e002      	b.n	8001398 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3b01      	subs	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f9      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40012300 	.word	0x40012300
 80013b8:	40012000 	.word	0x40012000
 80013bc:	10000012 	.word	0x10000012
 80013c0:	20000000 	.word	0x20000000
 80013c4:	431bde83 	.word	0x431bde83

080013c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d0:	4b79      	ldr	r3, [pc, #484]	; (80015b8 <ADC_Init+0x1f0>)
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	021a      	lsls	r2, r3, #8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6899      	ldr	r1, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	4a58      	ldr	r2, [pc, #352]	; (80015bc <ADC_Init+0x1f4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d022      	beq.n	80014a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800146e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6899      	ldr	r1, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001490:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6899      	ldr	r1, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	e00f      	b.n	80014c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0202 	bic.w	r2, r2, #2
 80014d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6899      	ldr	r1, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e1b      	ldrb	r3, [r3, #24]
 80014e0:	005a      	lsls	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001502:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001512:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6859      	ldr	r1, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	3b01      	subs	r3, #1
 8001520:	035a      	lsls	r2, r3, #13
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	e007      	b.n	800153c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800153a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	3b01      	subs	r3, #1
 8001558:	051a      	lsls	r2, r3, #20
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001570:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800157e:	025a      	lsls	r2, r3, #9
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6899      	ldr	r1, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	029a      	lsls	r2, r3, #10
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40012300 	.word	0x40012300
 80015bc:	0f000001 	.word	0x0f000001

080015c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d13c      	bne.n	8001654 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d12b      	bne.n	800164c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d127      	bne.n	800164c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001614:	2b00      	cmp	r3, #0
 8001616:	d119      	bne.n	800164c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0220 	bic.w	r2, r2, #32
 8001626:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff fa01 	bl	8000a54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001652:	e00e      	b.n	8001672 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff fd75 	bl	8001150 <HAL_ADC_ErrorCallback>
}
 8001666:	e004      	b.n	8001672 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff f9d9 	bl	8000a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2240      	movs	r2, #64	; 0x40
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f043 0204 	orr.w	r2, r3, #4
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff fd4a 	bl	8001150 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff faec 	bl	8000ed0 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e099      	b.n	8001a38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001924:	e00f      	b.n	8001946 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001926:	f7ff fad3 	bl	8000ed0 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b05      	cmp	r3, #5
 8001932:	d908      	bls.n	8001946 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2203      	movs	r2, #3
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e078      	b.n	8001a38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e8      	bne.n	8001926 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_DMA_Init+0x158>)
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001972:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2b04      	cmp	r3, #4
 800199e:	d107      	bne.n	80019b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4313      	orrs	r3, r2
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d117      	bne.n	8001a0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fa6f 	bl	8001ed0 <DMA_CheckFifoParam>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a06:	2301      	movs	r3, #1
 8001a08:	e016      	b.n	8001a38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fa26 	bl	8001e64 <DMA_CalcBaseAndBitshift>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	223f      	movs	r2, #63	; 0x3f
 8001a22:	409a      	lsls	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	f010803f 	.word	0xf010803f

08001a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Start_IT+0x26>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e040      	b.n	8001aec <HAL_DMA_Start_IT+0xa8>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d12f      	bne.n	8001ade <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2202      	movs	r2, #2
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f9b8 	bl	8001e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0216 	orr.w	r2, r2, #22
 8001ab2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0208 	orr.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e005      	b.n	8001aea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b00:	4b8e      	ldr	r3, [pc, #568]	; (8001d3c <HAL_DMA_IRQHandler+0x248>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a8e      	ldr	r2, [pc, #568]	; (8001d40 <HAL_DMA_IRQHandler+0x24c>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1e:	2208      	movs	r2, #8
 8001b20:	409a      	lsls	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01a      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0204 	bic.w	r2, r2, #4
 8001b46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	2201      	movs	r2, #1
 8001b66:	409a      	lsls	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d012      	beq.n	8001b96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	2201      	movs	r2, #1
 8001b84:	409a      	lsls	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f043 0202 	orr.w	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d012      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	2204      	movs	r2, #4
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d043      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d03c      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	2210      	movs	r2, #16
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d018      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d108      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d024      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
 8001c22:	e01f      	b.n	8001c64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01b      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
 8001c34:	e016      	b.n	8001c64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0208 	bic.w	r2, r2, #8
 8001c52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	2220      	movs	r2, #32
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 808f 	beq.w	8001d94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8087 	beq.w	8001d94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d136      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0216 	bic.w	r2, r2, #22
 8001cac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <HAL_DMA_IRQHandler+0x1da>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0208 	bic.w	r2, r2, #8
 8001cdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	223f      	movs	r2, #63	; 0x3f
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d07e      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
        }
        return;
 8001d0a:	e079      	b.n	8001e00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01d      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d031      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
 8001d38:	e02c      	b.n	8001d94 <HAL_DMA_IRQHandler+0x2a0>
 8001d3a:	bf00      	nop
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d023      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
 8001d54:	e01e      	b.n	8001d94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0210 	bic.w	r2, r2, #16
 8001d72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d032      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d022      	beq.n	8001dee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2205      	movs	r2, #5
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d307      	bcc.n	8001ddc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f2      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x2cc>
 8001dda:	e000      	b.n	8001dde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ddc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e00:	bf00      	nop
    }
  }
}
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	d108      	bne.n	8001e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e46:	e007      	b.n	8001e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3b10      	subs	r3, #16
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <DMA_CalcBaseAndBitshift+0x68>)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d909      	bls.n	8001ea6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	1d1a      	adds	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ea4:	e007      	b.n	8001eb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	aaaaaaab 	.word	0xaaaaaaab
 8001ecc:	08005154 	.word	0x08005154

08001ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d11f      	bne.n	8001f2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d856      	bhi.n	8001f9e <DMA_CheckFifoParam+0xce>
 8001ef0:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <DMA_CheckFifoParam+0x28>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f09 	.word	0x08001f09
 8001efc:	08001f1b 	.word	0x08001f1b
 8001f00:	08001f09 	.word	0x08001f09
 8001f04:	08001f9f 	.word	0x08001f9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d046      	beq.n	8001fa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f18:	e043      	b.n	8001fa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f22:	d140      	bne.n	8001fa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f28:	e03d      	b.n	8001fa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f32:	d121      	bne.n	8001f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d837      	bhi.n	8001faa <DMA_CheckFifoParam+0xda>
 8001f3a:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <DMA_CheckFifoParam+0x70>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001f51 	.word	0x08001f51
 8001f44:	08001f57 	.word	0x08001f57
 8001f48:	08001f51 	.word	0x08001f51
 8001f4c:	08001f69 	.word	0x08001f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      break;
 8001f54:	e030      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d025      	beq.n	8001fae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f66:	e022      	b.n	8001fae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f70:	d11f      	bne.n	8001fb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f76:	e01c      	b.n	8001fb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d903      	bls.n	8001f86 <DMA_CheckFifoParam+0xb6>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d003      	beq.n	8001f8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f84:	e018      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8a:	e015      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f9c:	e00b      	b.n	8001fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e00a      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e008      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e006      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e004      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e002      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fb2:	bf00      	nop
 8001fb4:	e000      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb6:	bf00      	nop
    }
  } 
  
  return status; 
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e159      	b.n	8002298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8148 	bne.w	8002292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d005      	beq.n	800201a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002016:	2b02      	cmp	r3, #2
 8002018:	d130      	bne.n	800207c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 0201 	and.w	r2, r3, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b03      	cmp	r3, #3
 8002086:	d017      	beq.n	80020b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a2 	beq.w	8002292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <HAL_GPIO_Init+0x2e8>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a56      	ldr	r2, [pc, #344]	; (80022b0 <HAL_GPIO_Init+0x2e8>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b54      	ldr	r3, [pc, #336]	; (80022b0 <HAL_GPIO_Init+0x2e8>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_GPIO_Init+0x2ec>)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a49      	ldr	r2, [pc, #292]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x202>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a48      	ldr	r2, [pc, #288]	; (80022bc <HAL_GPIO_Init+0x2f4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x1fe>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_GPIO_Init+0x2f8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a46      	ldr	r2, [pc, #280]	; (80022c4 <HAL_GPIO_Init+0x2fc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x1f6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a45      	ldr	r2, [pc, #276]	; (80022c8 <HAL_GPIO_Init+0x300>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x1f2>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021ba:	2307      	movs	r3, #7
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	; (80022b4 <HAL_GPIO_Init+0x2ec>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <HAL_GPIO_Init+0x304>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <HAL_GPIO_Init+0x304>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_GPIO_Init+0x304>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_GPIO_Init+0x304>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_GPIO_Init+0x304>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002262:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_GPIO_Init+0x304>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_GPIO_Init+0x304>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800228c:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <HAL_GPIO_Init+0x304>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f aea2 	bls.w	8001fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e001      	b.n	80022f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_PWR_EnableWakeUpPin+0x20>)
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4904      	ldr	r1, [pc, #16]	; (8002354 <HAL_PWR_EnableWakeUpPin+0x20>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40007000 	.word	0x40007000

08002358 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_PWR_EnterSLEEPMode+0x3c>)
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8002376:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8002378:	e005      	b.n	8002386 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d001      	beq.n	8002384 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8002380:	bf40      	sev
      __WFE();
 8002382:	bf20      	wfe
    __WFE();
 8002384:	bf20      	wfe
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80023a2:	f043 0302 	orr.w	r3, r3, #2
 80023a6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80023b4:	bf30      	wfi
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40007000 	.word	0x40007000
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_PWR_EnableSleepOnExit+0x1c>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_PWR_EnableSleepOnExit+0x1c>)
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	6113      	str	r3, [r2, #16]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_PWR_DisableSleepOnExit+0x1c>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_PWR_DisableSleepOnExit+0x1c>)
 80023f2:	f023 0302 	bic.w	r3, r3, #2
 80023f6:	6113      	str	r3, [r2, #16]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e267      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d075      	beq.n	8002512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b04      	cmp	r3, #4
 8002430:	d00c      	beq.n	800244c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d112      	bne.n	8002464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4b82      	ldr	r3, [pc, #520]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244a:	d10b      	bne.n	8002464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b7e      	ldr	r3, [pc, #504]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d05b      	beq.n	8002510 <HAL_RCC_OscConfig+0x108>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d157      	bne.n	8002510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e242      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x74>
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a75      	ldr	r2, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xb0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x98>
 8002486:	4b70      	ldr	r3, [pc, #448]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6f      	ldr	r2, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6c      	ldr	r2, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xb0>
 80024a0:	4b69      	ldr	r3, [pc, #420]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a68      	ldr	r2, [pc, #416]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b66      	ldr	r3, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a65      	ldr	r2, [pc, #404]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd06 	bl	8000ed0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fd02 	bl	8000ed0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e207      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xc0>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fcf2 	bl	8000ed0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fcee 	bl	8000ed0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1f3      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b51      	ldr	r3, [pc, #324]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0xe8>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b44      	ldr	r3, [pc, #272]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x152>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1c7      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4937      	ldr	r1, [pc, #220]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x244>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fca7 	bl	8000ed0 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002586:	f7fe fca3 	bl	8000ed0 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1a8      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4925      	ldr	r1, [pc, #148]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCC_OscConfig+0x244>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fc86 	bl	8000ed0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c8:	f7fe fc82 	bl	8000ed0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e187      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d036      	beq.n	8002660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_RCC_OscConfig+0x248>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fc66 	bl	8000ed0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002608:	f7fe fc62 	bl	8000ed0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e167      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x240>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x200>
 8002626:	e01b      	b.n	8002660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_OscConfig+0x248>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7fe fc4f 	bl	8000ed0 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e00e      	b.n	8002654 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002636:	f7fe fc4b 	bl	8000ed0 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d907      	bls.n	8002654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e150      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
 8002648:	40023800 	.word	0x40023800
 800264c:	42470000 	.word	0x42470000
 8002650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ea      	bne.n	8002636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8097 	beq.w	800279c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b7d      	ldr	r3, [pc, #500]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a7c      	ldr	r2, [pc, #496]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b7a      	ldr	r3, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b77      	ldr	r3, [pc, #476]	; (800287c <HAL_RCC_OscConfig+0x474>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b74      	ldr	r3, [pc, #464]	; (800287c <HAL_RCC_OscConfig+0x474>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a73      	ldr	r2, [pc, #460]	; (800287c <HAL_RCC_OscConfig+0x474>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fc0b 	bl	8000ed0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7fe fc07 	bl	8000ed0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e10c      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_OscConfig+0x474>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2ea>
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a63      	ldr	r2, [pc, #396]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	e01c      	b.n	800272c <HAL_RCC_OscConfig+0x324>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x30c>
 80026fa:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a5e      	ldr	r2, [pc, #376]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
 8002706:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	4a5b      	ldr	r2, [pc, #364]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6713      	str	r3, [r2, #112]	; 0x70
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0x324>
 8002714:	4b58      	ldr	r3, [pc, #352]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a57      	ldr	r2, [pc, #348]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	4b55      	ldr	r3, [pc, #340]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a54      	ldr	r2, [pc, #336]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d015      	beq.n	8002760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fbcc 	bl	8000ed0 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	e00a      	b.n	8002752 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7fe fbc8 	bl	8000ed0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0cb      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0ee      	beq.n	800273c <HAL_RCC_OscConfig+0x334>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002760:	f7fe fbb6 	bl	8000ed0 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fbb2 	bl	8000ed0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0b5      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ee      	bne.n	8002768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002790:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	4a38      	ldr	r2, [pc, #224]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80a1 	beq.w	80028e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027a6:	4b34      	ldr	r3, [pc, #208]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d05c      	beq.n	800286c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d141      	bne.n	800283e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCC_OscConfig+0x478>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fb86 	bl	8000ed0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe fb82 	bl	8000ed0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e087      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	3b01      	subs	r3, #1
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	491b      	ldr	r1, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x478>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fb5b 	bl	8000ed0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe fb57 	bl	8000ed0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e05c      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x416>
 800283c:	e054      	b.n	80028e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_OscConfig+0x478>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fb44 	bl	8000ed0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fb40 	bl	8000ed0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e045      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x470>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x444>
 800286a:	e03d      	b.n	80028e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d107      	bne.n	8002884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e038      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
 8002878:	40023800 	.word	0x40023800
 800287c:	40007000 	.word	0x40007000
 8002880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x4ec>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d028      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d121      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d11a      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028bc:	4293      	cmp	r3, r2
 80028be:	d111      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	3b01      	subs	r3, #1
 80028ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cc      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d90c      	bls.n	8002934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d044      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d119      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e067      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4934      	ldr	r1, [pc, #208]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fa72 	bl	8000ed0 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fe fa6e 	bl	8000ed0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d20c      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f821 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe f9d2 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08005144 	.word	0x08005144
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac8:	b090      	sub	sp, #64	; 0x40
 8002aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d00d      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	f200 80a1 	bhi.w	8002c30 <HAL_RCC_GetSysClockFreq+0x16c>
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x34>
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x3a>
 8002af6:	e09b      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002afa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002afc:	e09b      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afe:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b02:	e098      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d028      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	2200      	movs	r2, #0
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	627a      	str	r2, [r7, #36]	; 0x24
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b30:	fb03 f201 	mul.w	r2, r3, r1
 8002b34:	2300      	movs	r3, #0
 8002b36:	fb00 f303 	mul.w	r3, r0, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a43      	ldr	r2, [pc, #268]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b44:	460a      	mov	r2, r1
 8002b46:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4a:	4413      	add	r3, r2
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b50:	2200      	movs	r2, #0
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	61fa      	str	r2, [r7, #28]
 8002b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b5e:	f7fd fb97 	bl	8000290 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4613      	mov	r3, r2
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6a:	e053      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	2200      	movs	r2, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	617a      	str	r2, [r7, #20]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b7e:	f04f 0b00 	mov.w	fp, #0
 8002b82:	4652      	mov	r2, sl
 8002b84:	465b      	mov	r3, fp
 8002b86:	f04f 0000 	mov.w	r0, #0
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	0159      	lsls	r1, r3, #5
 8002b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b94:	0150      	lsls	r0, r2, #5
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b9e:	eb63 090b 	sbc.w	r9, r3, fp
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bb6:	ebb2 0408 	subs.w	r4, r2, r8
 8002bba:	eb63 0509 	sbc.w	r5, r3, r9
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	00eb      	lsls	r3, r5, #3
 8002bc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bcc:	00e2      	lsls	r2, r4, #3
 8002bce:	4614      	mov	r4, r2
 8002bd0:	461d      	mov	r5, r3
 8002bd2:	eb14 030a 	adds.w	r3, r4, sl
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	eb45 030b 	adc.w	r3, r5, fp
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bea:	4629      	mov	r1, r5
 8002bec:	028b      	lsls	r3, r1, #10
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	028a      	lsls	r2, r1, #10
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	60fa      	str	r2, [r7, #12]
 8002c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c08:	f7fd fb42 	bl	8000290 <__aeabi_uldivmod>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4613      	mov	r3, r2
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c2e:	e002      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3740      	adds	r7, #64	; 0x40
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	00f42400 	.word	0x00f42400
 8002c4c:	017d7840 	.word	0x017d7840

08002c50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d038      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c78:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c7e:	f7fe f927 	bl	8000ed0 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c86:	f7fe f923 	bl	8000ed0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0bd      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c98:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	495a      	ldr	r1, [pc, #360]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe f904 	bl	8000ed0 <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ccc:	f7fe f900 	bl	8000ed0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e09a      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cde:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8083 	beq.w	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	4b48      	ldr	r3, [pc, #288]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4a47      	ldr	r2, [pc, #284]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6413      	str	r3, [r2, #64]	; 0x40
 8002d08:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d20:	f7fe f8d6 	bl	8000ed0 <HAL_GetTick>
 8002d24:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe f8d2 	bl	8000ed0 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e06c      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02f      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d028      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d74:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d114      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f8a0 	bl	8000ed0 <HAL_GetTick>
 8002d90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe f89c 	bl	8000ed0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e034      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ee      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd8:	4911      	ldr	r1, [pc, #68]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
 8002dde:	e005      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dea:	6093      	str	r3, [r2, #8]
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	4909      	ldr	r1, [pc, #36]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7d1a      	ldrb	r2, [r3, #20]
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002e10:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	42470068 	.word	0x42470068
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42470e40 	.word	0x42470e40
 8002e2c:	424711e0 	.word	0x424711e0

08002e30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e073      	b.n	8002f2e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7f5b      	ldrb	r3, [r3, #29]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd febe 	bl	8000bd8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d055      	beq.n	8002f1c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	22ca      	movs	r2, #202	; 0xca
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2253      	movs	r2, #83	; 0x53
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f99d 	bl	80031c0 <RTC_EnterInitMode>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d12c      	bne.n	8002eea <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6919      	ldr	r1, [r3, #16]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	041a      	lsls	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f9a4 	bl	800322e <RTC_ExitInitMode>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d110      	bne.n	8002f12 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	22ff      	movs	r2, #255	; 0xff
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
 8002f1a:	e001      	b.n	8002f20 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	7f1b      	ldrb	r3, [r3, #28]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_RTC_SetTime+0x1c>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e087      	b.n	8003062 <HAL_RTC_SetTime+0x12c>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d126      	bne.n	8002fb2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2200      	movs	r2, #0
 8002f76:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f97b 	bl	8003278 <RTC_ByteToBcd2>
 8002f82:	4603      	mov	r3, r0
 8002f84:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f974 	bl	8003278 <RTC_ByteToBcd2>
 8002f90:	4603      	mov	r3, r0
 8002f92:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f94:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	789b      	ldrb	r3, [r3, #2]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f96c 	bl	8003278 <RTC_ByteToBcd2>
 8002fa0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fa2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	78db      	ldrb	r3, [r3, #3]
 8002faa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e018      	b.n	8002fe4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fd2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fd8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	78db      	ldrb	r3, [r3, #3]
 8002fde:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	22ca      	movs	r2, #202	; 0xca
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2253      	movs	r2, #83	; 0x53
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f8e3 	bl	80031c0 <RTC_EnterInitMode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d120      	bne.n	8003046 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800300e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003012:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003022:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	431a      	orrs	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f8f6 	bl	800322e <RTC_ExitInitMode>
 8003042:	4603      	mov	r3, r0
 8003044:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]

  return status;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
}
 8003062:	4618      	mov	r0, r3
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}

0800306a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	7f1b      	ldrb	r3, [r3, #28]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_RTC_SetDate+0x1c>
 8003082:	2302      	movs	r3, #2
 8003084:	e071      	b.n	800316a <HAL_RTC_SetDate+0x100>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2202      	movs	r2, #2
 8003090:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10e      	bne.n	80030b6 <HAL_RTC_SetDate+0x4c>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	f023 0310 	bic.w	r3, r3, #16
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	330a      	adds	r3, #10
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d11c      	bne.n	80030f6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	78db      	ldrb	r3, [r3, #3]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f8d9 	bl	8003278 <RTC_ByteToBcd2>
 80030c6:	4603      	mov	r3, r0
 80030c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f8d2 	bl	8003278 <RTC_ByteToBcd2>
 80030d4:	4603      	mov	r3, r0
 80030d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	789b      	ldrb	r3, [r3, #2]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f8ca 	bl	8003278 <RTC_ByteToBcd2>
 80030e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00e      	b.n	8003114 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	78db      	ldrb	r3, [r3, #3]
 80030fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003102:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003108:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	22ca      	movs	r2, #202	; 0xca
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2253      	movs	r2, #83	; 0x53
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f84b 	bl	80031c0 <RTC_EnterInitMode>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10c      	bne.n	800314e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800313e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003142:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f872 	bl	800322e <RTC_ExitInitMode>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]

  return status;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
}
 800316a:	4618      	mov	r0, r3
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
	...

08003174 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_RTC_WaitForSynchro+0x48>)
 8003186:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003188:	f7fd fea2 	bl	8000ed0 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800318e:	e009      	b.n	80031a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003190:	f7fd fe9e 	bl	8000ed0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800319e:	d901      	bls.n	80031a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e007      	b.n	80031b4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	00013f5f 	.word	0x00013f5f

080031c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d122      	bne.n	8003224 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ee:	f7fd fe6f 	bl	8000ed0 <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031f4:	e00c      	b.n	8003210 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031f6:	f7fd fe6b 	bl	8000ed0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003204:	d904      	bls.n	8003210 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <RTC_EnterInitMode+0x64>
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d1e8      	bne.n	80031f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003248:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ff8b 	bl	8003174 <HAL_RTC_WaitForSynchro>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2204      	movs	r2, #4
 8003268:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003286:	e005      	b.n	8003294 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	3b0a      	subs	r3, #10
 8003292:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	2b09      	cmp	r3, #9
 8003298:	d8f6      	bhi.n	8003288 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	b2db      	uxtb	r3, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80032c0:	4b5a      	ldr	r3, [pc, #360]	; (800342c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0adb      	lsrs	r3, r3, #11
 80032cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	7f1b      	ldrb	r3, [r3, #28]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e09d      	b.n	800341e <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2202      	movs	r2, #2
 80032ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	22ca      	movs	r2, #202	; 0xca
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2253      	movs	r2, #83	; 0x53
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d018      	beq.n	800333e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3b01      	subs	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	22ff      	movs	r2, #255	; 0xff
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2203      	movs	r2, #3
 8003324:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e076      	b.n	800341e <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1e6      	bne.n	800330c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800335e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a32      	ldr	r2, [pc, #200]	; (8003430 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3b01      	subs	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2203      	movs	r2, #3
 800338e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e041      	b.n	800341e <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0e6      	beq.n	8003376 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0207 	bic.w	r2, r2, #7
 80033b6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6899      	ldr	r1, [r3, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80033d0:	4b18      	ldr	r3, [pc, #96]	; (8003434 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80033d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033da:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80033dc:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80033e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033e6:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003406:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	22ff      	movs	r2, #255	; 0xff
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000000 	.word	0x20000000
 8003430:	10624dd3 	.word	0x10624dd3
 8003434:	40013c00 	.word	0x40013c00

08003438 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003442:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003446:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003466:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f809 	bl	8003480 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	775a      	strb	r2, [r3, #29]
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40013c00 	.word	0x40013c00

08003480 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3350      	adds	r3, #80	; 0x50
 80034aa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4413      	add	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3350      	adds	r3, #80	; 0x50
 80034dc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e041      	b.n	800358e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fb8e 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fa70 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d001      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e044      	b.n	800363a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_TIM_Base_Start_IT+0xb0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d018      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d013      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1a      	ldr	r2, [pc, #104]	; (800364c <HAL_TIM_Base_Start_IT+0xb4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_TIM_Base_Start_IT+0xb8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <HAL_TIM_Base_Start_IT+0xbc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <HAL_TIM_Base_Start_IT+0xc0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d010      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e007      	b.n	8003638 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40014000 	.word	0x40014000

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f999 	bl	80039de <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f98b 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f99c 	bl	80039f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f973 	bl	80039de <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f965 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f976 	bl	80039f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f94d 	bl	80039de <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f93f 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f950 	bl	80039f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d020      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2208      	movs	r2, #8
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f927 	bl	80039de <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f919 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f92a 	bl	80039f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0201 	mvn.w	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd f95a 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fab6 	bl	8003d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8fb 	bl	8003a06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0220 	mvn.w	r2, #32
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa88 	bl	8003d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_TIM_ConfigClockSource+0x1c>
 8003854:	2302      	movs	r3, #2
 8003856:	e0b4      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x186>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003890:	d03e      	beq.n	8003910 <HAL_TIM_ConfigClockSource+0xd4>
 8003892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003896:	f200 8087 	bhi.w	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	f000 8086 	beq.w	80039ae <HAL_TIM_ConfigClockSource+0x172>
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a6:	d87f      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d01a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0xa6>
 80038ac:	2b70      	cmp	r3, #112	; 0x70
 80038ae:	d87b      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d050      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x11a>
 80038b4:	2b60      	cmp	r3, #96	; 0x60
 80038b6:	d877      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d03c      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xfa>
 80038bc:	2b50      	cmp	r3, #80	; 0x50
 80038be:	d873      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d058      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x13a>
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d86f      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d064      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	2b30      	cmp	r3, #48	; 0x30
 80038ce:	d86b      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d060      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d867      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d05c      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d05a      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	e062      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	f000 f999 	bl	8003c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	609a      	str	r2, [r3, #8]
      break;
 800390e:	e04f      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003920:	f000 f982 	bl	8003c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003932:	609a      	str	r2, [r3, #8]
      break;
 8003934:	e03c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	461a      	mov	r2, r3
 8003944:	f000 f8f6 	bl	8003b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2150      	movs	r1, #80	; 0x50
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f94f 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 8003954:	e02c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003962:	461a      	mov	r2, r3
 8003964:	f000 f915 	bl	8003b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2160      	movs	r1, #96	; 0x60
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f93f 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 8003974:	e01c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	461a      	mov	r2, r3
 8003984:	f000 f8d6 	bl	8003b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f92f 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 8003994:	e00c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f000 f926 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 80039a6:	e003      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e000      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <TIM_Base_SetConfig+0xfc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00f      	beq.n	8003a54 <TIM_Base_SetConfig+0x38>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d00b      	beq.n	8003a54 <TIM_Base_SetConfig+0x38>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a37      	ldr	r2, [pc, #220]	; (8003b1c <TIM_Base_SetConfig+0x100>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_Base_SetConfig+0x38>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a36      	ldr	r2, [pc, #216]	; (8003b20 <TIM_Base_SetConfig+0x104>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_Base_SetConfig+0x38>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a35      	ldr	r2, [pc, #212]	; (8003b24 <TIM_Base_SetConfig+0x108>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d108      	bne.n	8003a66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a2b      	ldr	r2, [pc, #172]	; (8003b18 <TIM_Base_SetConfig+0xfc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01b      	beq.n	8003aa6 <TIM_Base_SetConfig+0x8a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a74:	d017      	beq.n	8003aa6 <TIM_Base_SetConfig+0x8a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <TIM_Base_SetConfig+0x100>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <TIM_Base_SetConfig+0x8a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <TIM_Base_SetConfig+0x104>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00f      	beq.n	8003aa6 <TIM_Base_SetConfig+0x8a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <TIM_Base_SetConfig+0x108>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0x8a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <TIM_Base_SetConfig+0x10c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0x8a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <TIM_Base_SetConfig+0x110>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0x8a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <TIM_Base_SetConfig+0x114>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <TIM_Base_SetConfig+0xfc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d103      	bne.n	8003aec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f023 0201 	bic.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	611a      	str	r2, [r3, #16]
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40000800 	.word	0x40000800
 8003b24:	40000c00 	.word	0x40000c00
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800

08003b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f023 0201 	bic.w	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f023 030a 	bic.w	r3, r3, #10
 8003b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b087      	sub	sp, #28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f023 0210 	bic.w	r2, r3, #16
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	031b      	lsls	r3, r3, #12
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f043 0307 	orr.w	r3, r3, #7
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e050      	b.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10c      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <findslot>:
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <findslot+0x2c>)
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	b118      	cbz	r0, 8003d7e <findslot+0x12>
 8003d76:	6a03      	ldr	r3, [r0, #32]
 8003d78:	b90b      	cbnz	r3, 8003d7e <findslot+0x12>
 8003d7a:	f000 fb25 	bl	80043c8 <__sinit>
 8003d7e:	2c13      	cmp	r4, #19
 8003d80:	d807      	bhi.n	8003d92 <findslot+0x26>
 8003d82:	4806      	ldr	r0, [pc, #24]	; (8003d9c <findslot+0x30>)
 8003d84:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003d88:	3201      	adds	r2, #1
 8003d8a:	d002      	beq.n	8003d92 <findslot+0x26>
 8003d8c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	2000      	movs	r0, #0
 8003d94:	e7fc      	b.n	8003d90 <findslot+0x24>
 8003d96:	bf00      	nop
 8003d98:	2000006c 	.word	0x2000006c
 8003d9c:	200009b8 	.word	0x200009b8

08003da0 <error>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	4604      	mov	r4, r0
 8003da4:	f000 fbea 	bl	800457c <__errno>
 8003da8:	2613      	movs	r6, #19
 8003daa:	4605      	mov	r5, r0
 8003dac:	2700      	movs	r7, #0
 8003dae:	4630      	mov	r0, r6
 8003db0:	4639      	mov	r1, r7
 8003db2:	beab      	bkpt	0x00ab
 8003db4:	4606      	mov	r6, r0
 8003db6:	602e      	str	r6, [r5, #0]
 8003db8:	4620      	mov	r0, r4
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dbc <checkerror>:
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d101      	bne.n	8003dc4 <checkerror+0x8>
 8003dc0:	f7ff bfee 	b.w	8003da0 <error>
 8003dc4:	4770      	bx	lr

08003dc6 <_swiread>:
 8003dc6:	b530      	push	{r4, r5, lr}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003dce:	9203      	str	r2, [sp, #12]
 8003dd0:	2406      	movs	r4, #6
 8003dd2:	ad01      	add	r5, sp, #4
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	beab      	bkpt	0x00ab
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ffed 	bl	8003dbc <checkerror>
 8003de2:	b005      	add	sp, #20
 8003de4:	bd30      	pop	{r4, r5, pc}

08003de6 <_read>:
 8003de6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003de8:	4615      	mov	r5, r2
 8003dea:	9101      	str	r1, [sp, #4]
 8003dec:	f7ff ffbe 	bl	8003d6c <findslot>
 8003df0:	9901      	ldr	r1, [sp, #4]
 8003df2:	4604      	mov	r4, r0
 8003df4:	b938      	cbnz	r0, 8003e06 <_read+0x20>
 8003df6:	f000 fbc1 	bl	800457c <__errno>
 8003dfa:	2309      	movs	r3, #9
 8003dfc:	6003      	str	r3, [r0, #0]
 8003dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003e02:	b003      	add	sp, #12
 8003e04:	bd30      	pop	{r4, r5, pc}
 8003e06:	6800      	ldr	r0, [r0, #0]
 8003e08:	462a      	mov	r2, r5
 8003e0a:	f7ff ffdc 	bl	8003dc6 <_swiread>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	d0f7      	beq.n	8003e02 <_read+0x1c>
 8003e12:	6863      	ldr	r3, [r4, #4]
 8003e14:	1a2a      	subs	r2, r5, r0
 8003e16:	4413      	add	r3, r2
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	e7f1      	b.n	8003e02 <_read+0x1c>

08003e1e <_swilseek>:
 8003e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e20:	460c      	mov	r4, r1
 8003e22:	4616      	mov	r6, r2
 8003e24:	f7ff ffa2 	bl	8003d6c <findslot>
 8003e28:	4605      	mov	r5, r0
 8003e2a:	b940      	cbnz	r0, 8003e3e <_swilseek+0x20>
 8003e2c:	f000 fba6 	bl	800457c <__errno>
 8003e30:	2309      	movs	r3, #9
 8003e32:	6003      	str	r3, [r0, #0]
 8003e34:	f04f 34ff 	mov.w	r4, #4294967295
 8003e38:	4620      	mov	r0, r4
 8003e3a:	b003      	add	sp, #12
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3e:	2e02      	cmp	r6, #2
 8003e40:	d903      	bls.n	8003e4a <_swilseek+0x2c>
 8003e42:	f000 fb9b 	bl	800457c <__errno>
 8003e46:	2316      	movs	r3, #22
 8003e48:	e7f3      	b.n	8003e32 <_swilseek+0x14>
 8003e4a:	2e01      	cmp	r6, #1
 8003e4c:	d112      	bne.n	8003e74 <_swilseek+0x56>
 8003e4e:	6843      	ldr	r3, [r0, #4]
 8003e50:	18e4      	adds	r4, r4, r3
 8003e52:	d4f6      	bmi.n	8003e42 <_swilseek+0x24>
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	260a      	movs	r6, #10
 8003e58:	e9cd 3400 	strd	r3, r4, [sp]
 8003e5c:	466f      	mov	r7, sp
 8003e5e:	4630      	mov	r0, r6
 8003e60:	4639      	mov	r1, r7
 8003e62:	beab      	bkpt	0x00ab
 8003e64:	4606      	mov	r6, r0
 8003e66:	4630      	mov	r0, r6
 8003e68:	f7ff ffa8 	bl	8003dbc <checkerror>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	dbe1      	blt.n	8003e34 <_swilseek+0x16>
 8003e70:	606c      	str	r4, [r5, #4]
 8003e72:	e7e1      	b.n	8003e38 <_swilseek+0x1a>
 8003e74:	2e02      	cmp	r6, #2
 8003e76:	6803      	ldr	r3, [r0, #0]
 8003e78:	d1ec      	bne.n	8003e54 <_swilseek+0x36>
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	260c      	movs	r6, #12
 8003e7e:	466f      	mov	r7, sp
 8003e80:	4630      	mov	r0, r6
 8003e82:	4639      	mov	r1, r7
 8003e84:	beab      	bkpt	0x00ab
 8003e86:	4606      	mov	r6, r0
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f7ff ff97 	bl	8003dbc <checkerror>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d0d0      	beq.n	8003e34 <_swilseek+0x16>
 8003e92:	4404      	add	r4, r0
 8003e94:	e7de      	b.n	8003e54 <_swilseek+0x36>

08003e96 <_lseek>:
 8003e96:	f7ff bfc2 	b.w	8003e1e <_swilseek>

08003e9a <_swiwrite>:
 8003e9a:	b530      	push	{r4, r5, lr}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003ea2:	9203      	str	r2, [sp, #12]
 8003ea4:	2405      	movs	r4, #5
 8003ea6:	ad01      	add	r5, sp, #4
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	beab      	bkpt	0x00ab
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff ff83 	bl	8003dbc <checkerror>
 8003eb6:	b005      	add	sp, #20
 8003eb8:	bd30      	pop	{r4, r5, pc}

08003eba <_write>:
 8003eba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ebc:	4615      	mov	r5, r2
 8003ebe:	9101      	str	r1, [sp, #4]
 8003ec0:	f7ff ff54 	bl	8003d6c <findslot>
 8003ec4:	9901      	ldr	r1, [sp, #4]
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	b930      	cbnz	r0, 8003ed8 <_write+0x1e>
 8003eca:	f000 fb57 	bl	800457c <__errno>
 8003ece:	2309      	movs	r3, #9
 8003ed0:	6003      	str	r3, [r0, #0]
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	e012      	b.n	8003efe <_write+0x44>
 8003ed8:	6800      	ldr	r0, [r0, #0]
 8003eda:	462a      	mov	r2, r5
 8003edc:	f7ff ffdd 	bl	8003e9a <_swiwrite>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	dbf6      	blt.n	8003ed2 <_write+0x18>
 8003ee4:	6862      	ldr	r2, [r4, #4]
 8003ee6:	1a2b      	subs	r3, r5, r0
 8003ee8:	441a      	add	r2, r3
 8003eea:	42a8      	cmp	r0, r5
 8003eec:	6062      	str	r2, [r4, #4]
 8003eee:	d105      	bne.n	8003efc <_write+0x42>
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	b003      	add	sp, #12
 8003ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ef8:	f7ff bf52 	b.w	8003da0 <error>
 8003efc:	4618      	mov	r0, r3
 8003efe:	b003      	add	sp, #12
 8003f00:	bd30      	pop	{r4, r5, pc}

08003f02 <_swiclose>:
 8003f02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f04:	2402      	movs	r4, #2
 8003f06:	9001      	str	r0, [sp, #4]
 8003f08:	ad01      	add	r5, sp, #4
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	beab      	bkpt	0x00ab
 8003f10:	4604      	mov	r4, r0
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff ff52 	bl	8003dbc <checkerror>
 8003f18:	b003      	add	sp, #12
 8003f1a:	bd30      	pop	{r4, r5, pc}

08003f1c <_close>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4605      	mov	r5, r0
 8003f20:	f7ff ff24 	bl	8003d6c <findslot>
 8003f24:	4604      	mov	r4, r0
 8003f26:	b930      	cbnz	r0, 8003f36 <_close+0x1a>
 8003f28:	f000 fb28 	bl	800457c <__errno>
 8003f2c:	2309      	movs	r3, #9
 8003f2e:	6003      	str	r3, [r0, #0]
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	bd38      	pop	{r3, r4, r5, pc}
 8003f36:	3d01      	subs	r5, #1
 8003f38:	2d01      	cmp	r5, #1
 8003f3a:	d809      	bhi.n	8003f50 <_close+0x34>
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <_close+0x48>)
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d104      	bne.n	8003f50 <_close+0x34>
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4a:	6003      	str	r3, [r0, #0]
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e7f1      	b.n	8003f34 <_close+0x18>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	f7ff ffd6 	bl	8003f02 <_swiclose>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d1ec      	bne.n	8003f34 <_close+0x18>
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	e7e8      	b.n	8003f34 <_close+0x18>
 8003f62:	bf00      	nop
 8003f64:	200009b8 	.word	0x200009b8

08003f68 <_swistat>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	f7ff fefe 	bl	8003d6c <findslot>
 8003f70:	4605      	mov	r5, r0
 8003f72:	b930      	cbnz	r0, 8003f82 <_swistat+0x1a>
 8003f74:	f000 fb02 	bl	800457c <__errno>
 8003f78:	2309      	movs	r3, #9
 8003f7a:	6003      	str	r3, [r0, #0]
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	6863      	ldr	r3, [r4, #4]
 8003f84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f88:	6063      	str	r3, [r4, #4]
 8003f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f8e:	64a3      	str	r3, [r4, #72]	; 0x48
 8003f90:	260c      	movs	r6, #12
 8003f92:	4630      	mov	r0, r6
 8003f94:	4629      	mov	r1, r5
 8003f96:	beab      	bkpt	0x00ab
 8003f98:	4605      	mov	r5, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f7ff ff0e 	bl	8003dbc <checkerror>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	bf1c      	itt	ne
 8003fa4:	6120      	strne	r0, [r4, #16]
 8003fa6:	2000      	movne	r0, #0
 8003fa8:	e7ea      	b.n	8003f80 <_swistat+0x18>

08003faa <_fstat>:
 8003faa:	460b      	mov	r3, r1
 8003fac:	b510      	push	{r4, lr}
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	2258      	movs	r2, #88	; 0x58
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fa92 	bl	80044de <memset>
 8003fba:	4601      	mov	r1, r0
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc2:	f7ff bfd1 	b.w	8003f68 <_swistat>

08003fc6 <_stat>:
 8003fc6:	b538      	push	{r3, r4, r5, lr}
 8003fc8:	460d      	mov	r5, r1
 8003fca:	4604      	mov	r4, r0
 8003fcc:	2258      	movs	r2, #88	; 0x58
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 fa84 	bl	80044de <memset>
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f000 f811 	bl	8004000 <_swiopen>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	d00b      	beq.n	8003ffc <_stat+0x36>
 8003fe4:	686b      	ldr	r3, [r5, #4]
 8003fe6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fea:	606b      	str	r3, [r5, #4]
 8003fec:	4629      	mov	r1, r5
 8003fee:	f7ff ffbb 	bl	8003f68 <_swistat>
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff ff91 	bl	8003f1c <_close>
 8003ffa:	462c      	mov	r4, r5
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}

08004000 <_swiopen>:
 8004000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004004:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80040b0 <_swiopen+0xb0>
 8004008:	b097      	sub	sp, #92	; 0x5c
 800400a:	4607      	mov	r7, r0
 800400c:	460e      	mov	r6, r1
 800400e:	2500      	movs	r5, #0
 8004010:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004014:	1c61      	adds	r1, r4, #1
 8004016:	d037      	beq.n	8004088 <_swiopen+0x88>
 8004018:	3501      	adds	r5, #1
 800401a:	2d14      	cmp	r5, #20
 800401c:	d1f8      	bne.n	8004010 <_swiopen+0x10>
 800401e:	f000 faad 	bl	800457c <__errno>
 8004022:	2318      	movs	r3, #24
 8004024:	6003      	str	r3, [r0, #0]
 8004026:	f04f 34ff 	mov.w	r4, #4294967295
 800402a:	e03d      	b.n	80040a8 <_swiopen+0xa8>
 800402c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004030:	f240 6301 	movw	r3, #1537	; 0x601
 8004034:	07b2      	lsls	r2, r6, #30
 8004036:	bf48      	it	mi
 8004038:	f044 0402 	orrmi.w	r4, r4, #2
 800403c:	421e      	tst	r6, r3
 800403e:	bf18      	it	ne
 8004040:	f044 0404 	orrne.w	r4, r4, #4
 8004044:	0733      	lsls	r3, r6, #28
 8004046:	bf48      	it	mi
 8004048:	f024 0404 	bicmi.w	r4, r4, #4
 800404c:	4638      	mov	r0, r7
 800404e:	bf48      	it	mi
 8004050:	f044 0408 	orrmi.w	r4, r4, #8
 8004054:	9700      	str	r7, [sp, #0]
 8004056:	f7fc f8c3 	bl	80001e0 <strlen>
 800405a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800405e:	2401      	movs	r4, #1
 8004060:	4620      	mov	r0, r4
 8004062:	4649      	mov	r1, r9
 8004064:	beab      	bkpt	0x00ab
 8004066:	4604      	mov	r4, r0
 8004068:	2c00      	cmp	r4, #0
 800406a:	db08      	blt.n	800407e <_swiopen+0x7e>
 800406c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004070:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004074:	2300      	movs	r3, #0
 8004076:	f8c8 3004 	str.w	r3, [r8, #4]
 800407a:	462c      	mov	r4, r5
 800407c:	e014      	b.n	80040a8 <_swiopen+0xa8>
 800407e:	4620      	mov	r0, r4
 8004080:	f7ff fe8e 	bl	8003da0 <error>
 8004084:	4604      	mov	r4, r0
 8004086:	e00f      	b.n	80040a8 <_swiopen+0xa8>
 8004088:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800408c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004090:	46e9      	mov	r9, sp
 8004092:	d1cb      	bne.n	800402c <_swiopen+0x2c>
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff ff95 	bl	8003fc6 <_stat>
 800409c:	3001      	adds	r0, #1
 800409e:	d0c5      	beq.n	800402c <_swiopen+0x2c>
 80040a0:	f000 fa6c 	bl	800457c <__errno>
 80040a4:	2311      	movs	r3, #17
 80040a6:	6003      	str	r3, [r0, #0]
 80040a8:	4620      	mov	r0, r4
 80040aa:	b017      	add	sp, #92	; 0x5c
 80040ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040b0:	200009b8 	.word	0x200009b8

080040b4 <_get_semihosting_exts>:
 80040b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040b8:	4606      	mov	r6, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	482a      	ldr	r0, [pc, #168]	; (8004168 <_get_semihosting_exts+0xb4>)
 80040be:	2100      	movs	r1, #0
 80040c0:	4615      	mov	r5, r2
 80040c2:	f7ff ff9d 	bl	8004000 <_swiopen>
 80040c6:	462a      	mov	r2, r5
 80040c8:	4604      	mov	r4, r0
 80040ca:	2100      	movs	r1, #0
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 fa06 	bl	80044de <memset>
 80040d2:	1c63      	adds	r3, r4, #1
 80040d4:	d016      	beq.n	8004104 <_get_semihosting_exts+0x50>
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff fe48 	bl	8003d6c <findslot>
 80040dc:	f04f 080c 	mov.w	r8, #12
 80040e0:	4681      	mov	r9, r0
 80040e2:	4640      	mov	r0, r8
 80040e4:	4649      	mov	r1, r9
 80040e6:	beab      	bkpt	0x00ab
 80040e8:	4680      	mov	r8, r0
 80040ea:	4640      	mov	r0, r8
 80040ec:	f7ff fe66 	bl	8003dbc <checkerror>
 80040f0:	2803      	cmp	r0, #3
 80040f2:	dd02      	ble.n	80040fa <_get_semihosting_exts+0x46>
 80040f4:	1ec3      	subs	r3, r0, #3
 80040f6:	42ab      	cmp	r3, r5
 80040f8:	dc08      	bgt.n	800410c <_get_semihosting_exts+0x58>
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7ff ff0e 	bl	8003f1c <_close>
 8004100:	f04f 34ff 	mov.w	r4, #4294967295
 8004104:	4620      	mov	r0, r4
 8004106:	b003      	add	sp, #12
 8004108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800410c:	2204      	movs	r2, #4
 800410e:	eb0d 0102 	add.w	r1, sp, r2
 8004112:	4620      	mov	r0, r4
 8004114:	f7ff fe67 	bl	8003de6 <_read>
 8004118:	2803      	cmp	r0, #3
 800411a:	ddee      	ble.n	80040fa <_get_semihosting_exts+0x46>
 800411c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004120:	2b53      	cmp	r3, #83	; 0x53
 8004122:	d1ea      	bne.n	80040fa <_get_semihosting_exts+0x46>
 8004124:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004128:	2b48      	cmp	r3, #72	; 0x48
 800412a:	d1e6      	bne.n	80040fa <_get_semihosting_exts+0x46>
 800412c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004130:	2b46      	cmp	r3, #70	; 0x46
 8004132:	d1e2      	bne.n	80040fa <_get_semihosting_exts+0x46>
 8004134:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004138:	2b42      	cmp	r3, #66	; 0x42
 800413a:	d1de      	bne.n	80040fa <_get_semihosting_exts+0x46>
 800413c:	2201      	movs	r2, #1
 800413e:	4639      	mov	r1, r7
 8004140:	4620      	mov	r0, r4
 8004142:	f7ff fe6c 	bl	8003e1e <_swilseek>
 8004146:	2800      	cmp	r0, #0
 8004148:	dbd7      	blt.n	80040fa <_get_semihosting_exts+0x46>
 800414a:	462a      	mov	r2, r5
 800414c:	4631      	mov	r1, r6
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff fe49 	bl	8003de6 <_read>
 8004154:	4605      	mov	r5, r0
 8004156:	4620      	mov	r0, r4
 8004158:	f7ff fee0 	bl	8003f1c <_close>
 800415c:	4628      	mov	r0, r5
 800415e:	f7ff fe2d 	bl	8003dbc <checkerror>
 8004162:	4604      	mov	r4, r0
 8004164:	e7ce      	b.n	8004104 <_get_semihosting_exts+0x50>
 8004166:	bf00      	nop
 8004168:	0800515c 	.word	0x0800515c

0800416c <initialise_semihosting_exts>:
 800416c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800416e:	4d0a      	ldr	r5, [pc, #40]	; (8004198 <initialise_semihosting_exts+0x2c>)
 8004170:	4c0a      	ldr	r4, [pc, #40]	; (800419c <initialise_semihosting_exts+0x30>)
 8004172:	2100      	movs	r1, #0
 8004174:	2201      	movs	r2, #1
 8004176:	a801      	add	r0, sp, #4
 8004178:	6029      	str	r1, [r5, #0]
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	f7ff ff9a 	bl	80040b4 <_get_semihosting_exts>
 8004180:	2800      	cmp	r0, #0
 8004182:	dd07      	ble.n	8004194 <initialise_semihosting_exts+0x28>
 8004184:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004188:	f003 0201 	and.w	r2, r3, #1
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	602a      	str	r2, [r5, #0]
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	b003      	add	sp, #12
 8004196:	bd30      	pop	{r4, r5, pc}
 8004198:	2000000c 	.word	0x2000000c
 800419c:	20000010 	.word	0x20000010

080041a0 <_has_ext_stdout_stderr>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4c04      	ldr	r4, [pc, #16]	; (80041b4 <_has_ext_stdout_stderr+0x14>)
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da01      	bge.n	80041ae <_has_ext_stdout_stderr+0xe>
 80041aa:	f7ff ffdf 	bl	800416c <initialise_semihosting_exts>
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	bf00      	nop
 80041b4:	20000010 	.word	0x20000010

080041b8 <initialise_monitor_handles>:
 80041b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041bc:	b085      	sub	sp, #20
 80041be:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004270 <initialise_monitor_handles+0xb8>
 80041c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80041c6:	2303      	movs	r3, #3
 80041c8:	2400      	movs	r4, #0
 80041ca:	9303      	str	r3, [sp, #12]
 80041cc:	af01      	add	r7, sp, #4
 80041ce:	9402      	str	r4, [sp, #8]
 80041d0:	2501      	movs	r5, #1
 80041d2:	4628      	mov	r0, r5
 80041d4:	4639      	mov	r1, r7
 80041d6:	beab      	bkpt	0x00ab
 80041d8:	4605      	mov	r5, r0
 80041da:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004274 <initialise_monitor_handles+0xbc>
 80041de:	4623      	mov	r3, r4
 80041e0:	4c20      	ldr	r4, [pc, #128]	; (8004264 <initialise_monitor_handles+0xac>)
 80041e2:	f8c8 5000 	str.w	r5, [r8]
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80041ee:	3301      	adds	r3, #1
 80041f0:	2b14      	cmp	r3, #20
 80041f2:	d1fa      	bne.n	80041ea <initialise_monitor_handles+0x32>
 80041f4:	f7ff ffd4 	bl	80041a0 <_has_ext_stdout_stderr>
 80041f8:	4d1b      	ldr	r5, [pc, #108]	; (8004268 <initialise_monitor_handles+0xb0>)
 80041fa:	b1d0      	cbz	r0, 8004232 <initialise_monitor_handles+0x7a>
 80041fc:	f04f 0a03 	mov.w	sl, #3
 8004200:	2304      	movs	r3, #4
 8004202:	f8cd 9004 	str.w	r9, [sp, #4]
 8004206:	2601      	movs	r6, #1
 8004208:	f8cd a00c 	str.w	sl, [sp, #12]
 800420c:	9302      	str	r3, [sp, #8]
 800420e:	4630      	mov	r0, r6
 8004210:	4639      	mov	r1, r7
 8004212:	beab      	bkpt	0x00ab
 8004214:	4683      	mov	fp, r0
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <initialise_monitor_handles+0xb4>)
 8004218:	f8cd 9004 	str.w	r9, [sp, #4]
 800421c:	f8c3 b000 	str.w	fp, [r3]
 8004220:	2308      	movs	r3, #8
 8004222:	f8cd a00c 	str.w	sl, [sp, #12]
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	4630      	mov	r0, r6
 800422a:	4639      	mov	r1, r7
 800422c:	beab      	bkpt	0x00ab
 800422e:	4606      	mov	r6, r0
 8004230:	602e      	str	r6, [r5, #0]
 8004232:	682b      	ldr	r3, [r5, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	bf02      	ittt	eq
 8004238:	4b0c      	ldreq	r3, [pc, #48]	; (800426c <initialise_monitor_handles+0xb4>)
 800423a:	681b      	ldreq	r3, [r3, #0]
 800423c:	602b      	streq	r3, [r5, #0]
 800423e:	2600      	movs	r6, #0
 8004240:	f8d8 3000 	ldr.w	r3, [r8]
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	6066      	str	r6, [r4, #4]
 8004248:	f7ff ffaa 	bl	80041a0 <_has_ext_stdout_stderr>
 800424c:	b130      	cbz	r0, 800425c <initialise_monitor_handles+0xa4>
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <initialise_monitor_handles+0xb4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004256:	682b      	ldr	r3, [r5, #0]
 8004258:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800425c:	b005      	add	sp, #20
 800425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004262:	bf00      	nop
 8004264:	200009b8 	.word	0x200009b8
 8004268:	200009ac 	.word	0x200009ac
 800426c:	200009b4 	.word	0x200009b4
 8004270:	08005172 	.word	0x08005172
 8004274:	200009b0 	.word	0x200009b0

08004278 <_isatty>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	f7ff fd77 	bl	8003d6c <findslot>
 800427e:	2509      	movs	r5, #9
 8004280:	4604      	mov	r4, r0
 8004282:	b920      	cbnz	r0, 800428e <_isatty+0x16>
 8004284:	f000 f97a 	bl	800457c <__errno>
 8004288:	6005      	str	r5, [r0, #0]
 800428a:	4620      	mov	r0, r4
 800428c:	bd70      	pop	{r4, r5, r6, pc}
 800428e:	4628      	mov	r0, r5
 8004290:	4621      	mov	r1, r4
 8004292:	beab      	bkpt	0x00ab
 8004294:	4604      	mov	r4, r0
 8004296:	2c01      	cmp	r4, #1
 8004298:	d0f7      	beq.n	800428a <_isatty+0x12>
 800429a:	f000 f96f 	bl	800457c <__errno>
 800429e:	2400      	movs	r4, #0
 80042a0:	4605      	mov	r5, r0
 80042a2:	2613      	movs	r6, #19
 80042a4:	4630      	mov	r0, r6
 80042a6:	4621      	mov	r1, r4
 80042a8:	beab      	bkpt	0x00ab
 80042aa:	4606      	mov	r6, r0
 80042ac:	602e      	str	r6, [r5, #0]
 80042ae:	e7ec      	b.n	800428a <_isatty+0x12>

080042b0 <std>:
 80042b0:	2300      	movs	r3, #0
 80042b2:	b510      	push	{r4, lr}
 80042b4:	4604      	mov	r4, r0
 80042b6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042be:	6083      	str	r3, [r0, #8]
 80042c0:	8181      	strh	r1, [r0, #12]
 80042c2:	6643      	str	r3, [r0, #100]	; 0x64
 80042c4:	81c2      	strh	r2, [r0, #14]
 80042c6:	6183      	str	r3, [r0, #24]
 80042c8:	4619      	mov	r1, r3
 80042ca:	2208      	movs	r2, #8
 80042cc:	305c      	adds	r0, #92	; 0x5c
 80042ce:	f000 f906 	bl	80044de <memset>
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <std+0x58>)
 80042d4:	6263      	str	r3, [r4, #36]	; 0x24
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <std+0x5c>)
 80042d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <std+0x60>)
 80042dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <std+0x64>)
 80042e0:	6323      	str	r3, [r4, #48]	; 0x30
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <std+0x68>)
 80042e4:	6224      	str	r4, [r4, #32]
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d006      	beq.n	80042f8 <std+0x48>
 80042ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80042ee:	4294      	cmp	r4, r2
 80042f0:	d002      	beq.n	80042f8 <std+0x48>
 80042f2:	33d0      	adds	r3, #208	; 0xd0
 80042f4:	429c      	cmp	r4, r3
 80042f6:	d105      	bne.n	8004304 <std+0x54>
 80042f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004300:	f000 b966 	b.w	80045d0 <__retarget_lock_init_recursive>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	bf00      	nop
 8004308:	08004459 	.word	0x08004459
 800430c:	0800447b 	.word	0x0800447b
 8004310:	080044b3 	.word	0x080044b3
 8004314:	080044d7 	.word	0x080044d7
 8004318:	20000a58 	.word	0x20000a58

0800431c <stdio_exit_handler>:
 800431c:	4a02      	ldr	r2, [pc, #8]	; (8004328 <stdio_exit_handler+0xc>)
 800431e:	4903      	ldr	r1, [pc, #12]	; (800432c <stdio_exit_handler+0x10>)
 8004320:	4803      	ldr	r0, [pc, #12]	; (8004330 <stdio_exit_handler+0x14>)
 8004322:	f000 b869 	b.w	80043f8 <_fwalk_sglue>
 8004326:	bf00      	nop
 8004328:	20000014 	.word	0x20000014
 800432c:	08004e7d 	.word	0x08004e7d
 8004330:	20000020 	.word	0x20000020

08004334 <cleanup_stdio>:
 8004334:	6841      	ldr	r1, [r0, #4]
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <cleanup_stdio+0x34>)
 8004338:	4299      	cmp	r1, r3
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
 800433e:	d001      	beq.n	8004344 <cleanup_stdio+0x10>
 8004340:	f000 fd9c 	bl	8004e7c <_fflush_r>
 8004344:	68a1      	ldr	r1, [r4, #8]
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <cleanup_stdio+0x38>)
 8004348:	4299      	cmp	r1, r3
 800434a:	d002      	beq.n	8004352 <cleanup_stdio+0x1e>
 800434c:	4620      	mov	r0, r4
 800434e:	f000 fd95 	bl	8004e7c <_fflush_r>
 8004352:	68e1      	ldr	r1, [r4, #12]
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <cleanup_stdio+0x3c>)
 8004356:	4299      	cmp	r1, r3
 8004358:	d004      	beq.n	8004364 <cleanup_stdio+0x30>
 800435a:	4620      	mov	r0, r4
 800435c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004360:	f000 bd8c 	b.w	8004e7c <_fflush_r>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	bf00      	nop
 8004368:	20000a58 	.word	0x20000a58
 800436c:	20000ac0 	.word	0x20000ac0
 8004370:	20000b28 	.word	0x20000b28

08004374 <global_stdio_init.part.0>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <global_stdio_init.part.0+0x30>)
 8004378:	4c0b      	ldr	r4, [pc, #44]	; (80043a8 <global_stdio_init.part.0+0x34>)
 800437a:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <global_stdio_init.part.0+0x38>)
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	4620      	mov	r0, r4
 8004380:	2200      	movs	r2, #0
 8004382:	2104      	movs	r1, #4
 8004384:	f7ff ff94 	bl	80042b0 <std>
 8004388:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800438c:	2201      	movs	r2, #1
 800438e:	2109      	movs	r1, #9
 8004390:	f7ff ff8e 	bl	80042b0 <std>
 8004394:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004398:	2202      	movs	r2, #2
 800439a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800439e:	2112      	movs	r1, #18
 80043a0:	f7ff bf86 	b.w	80042b0 <std>
 80043a4:	20000b90 	.word	0x20000b90
 80043a8:	20000a58 	.word	0x20000a58
 80043ac:	0800431d 	.word	0x0800431d

080043b0 <__sfp_lock_acquire>:
 80043b0:	4801      	ldr	r0, [pc, #4]	; (80043b8 <__sfp_lock_acquire+0x8>)
 80043b2:	f000 b90e 	b.w	80045d2 <__retarget_lock_acquire_recursive>
 80043b6:	bf00      	nop
 80043b8:	20000b99 	.word	0x20000b99

080043bc <__sfp_lock_release>:
 80043bc:	4801      	ldr	r0, [pc, #4]	; (80043c4 <__sfp_lock_release+0x8>)
 80043be:	f000 b909 	b.w	80045d4 <__retarget_lock_release_recursive>
 80043c2:	bf00      	nop
 80043c4:	20000b99 	.word	0x20000b99

080043c8 <__sinit>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4604      	mov	r4, r0
 80043cc:	f7ff fff0 	bl	80043b0 <__sfp_lock_acquire>
 80043d0:	6a23      	ldr	r3, [r4, #32]
 80043d2:	b11b      	cbz	r3, 80043dc <__sinit+0x14>
 80043d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d8:	f7ff bff0 	b.w	80043bc <__sfp_lock_release>
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <__sinit+0x28>)
 80043de:	6223      	str	r3, [r4, #32]
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <__sinit+0x2c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f5      	bne.n	80043d4 <__sinit+0xc>
 80043e8:	f7ff ffc4 	bl	8004374 <global_stdio_init.part.0>
 80043ec:	e7f2      	b.n	80043d4 <__sinit+0xc>
 80043ee:	bf00      	nop
 80043f0:	08004335 	.word	0x08004335
 80043f4:	20000b90 	.word	0x20000b90

080043f8 <_fwalk_sglue>:
 80043f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043fc:	4607      	mov	r7, r0
 80043fe:	4688      	mov	r8, r1
 8004400:	4614      	mov	r4, r2
 8004402:	2600      	movs	r6, #0
 8004404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004408:	f1b9 0901 	subs.w	r9, r9, #1
 800440c:	d505      	bpl.n	800441a <_fwalk_sglue+0x22>
 800440e:	6824      	ldr	r4, [r4, #0]
 8004410:	2c00      	cmp	r4, #0
 8004412:	d1f7      	bne.n	8004404 <_fwalk_sglue+0xc>
 8004414:	4630      	mov	r0, r6
 8004416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441a:	89ab      	ldrh	r3, [r5, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d907      	bls.n	8004430 <_fwalk_sglue+0x38>
 8004420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004424:	3301      	adds	r3, #1
 8004426:	d003      	beq.n	8004430 <_fwalk_sglue+0x38>
 8004428:	4629      	mov	r1, r5
 800442a:	4638      	mov	r0, r7
 800442c:	47c0      	blx	r8
 800442e:	4306      	orrs	r6, r0
 8004430:	3568      	adds	r5, #104	; 0x68
 8004432:	e7e9      	b.n	8004408 <_fwalk_sglue+0x10>

08004434 <iprintf>:
 8004434:	b40f      	push	{r0, r1, r2, r3}
 8004436:	b507      	push	{r0, r1, r2, lr}
 8004438:	4906      	ldr	r1, [pc, #24]	; (8004454 <iprintf+0x20>)
 800443a:	ab04      	add	r3, sp, #16
 800443c:	6808      	ldr	r0, [r1, #0]
 800443e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004442:	6881      	ldr	r1, [r0, #8]
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	f000 f9e9 	bl	800481c <_vfiprintf_r>
 800444a:	b003      	add	sp, #12
 800444c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004450:	b004      	add	sp, #16
 8004452:	4770      	bx	lr
 8004454:	2000006c 	.word	0x2000006c

08004458 <__sread>:
 8004458:	b510      	push	{r4, lr}
 800445a:	460c      	mov	r4, r1
 800445c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004460:	f000 f868 	bl	8004534 <_read_r>
 8004464:	2800      	cmp	r0, #0
 8004466:	bfab      	itete	ge
 8004468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800446a:	89a3      	ldrhlt	r3, [r4, #12]
 800446c:	181b      	addge	r3, r3, r0
 800446e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004472:	bfac      	ite	ge
 8004474:	6563      	strge	r3, [r4, #84]	; 0x54
 8004476:	81a3      	strhlt	r3, [r4, #12]
 8004478:	bd10      	pop	{r4, pc}

0800447a <__swrite>:
 800447a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800447e:	461f      	mov	r7, r3
 8004480:	898b      	ldrh	r3, [r1, #12]
 8004482:	05db      	lsls	r3, r3, #23
 8004484:	4605      	mov	r5, r0
 8004486:	460c      	mov	r4, r1
 8004488:	4616      	mov	r6, r2
 800448a:	d505      	bpl.n	8004498 <__swrite+0x1e>
 800448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004490:	2302      	movs	r3, #2
 8004492:	2200      	movs	r2, #0
 8004494:	f000 f83c 	bl	8004510 <_lseek_r>
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800449e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	4632      	mov	r2, r6
 80044a6:	463b      	mov	r3, r7
 80044a8:	4628      	mov	r0, r5
 80044aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ae:	f000 b853 	b.w	8004558 <_write_r>

080044b2 <__sseek>:
 80044b2:	b510      	push	{r4, lr}
 80044b4:	460c      	mov	r4, r1
 80044b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ba:	f000 f829 	bl	8004510 <_lseek_r>
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	bf15      	itete	ne
 80044c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80044c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044ce:	81a3      	strheq	r3, [r4, #12]
 80044d0:	bf18      	it	ne
 80044d2:	81a3      	strhne	r3, [r4, #12]
 80044d4:	bd10      	pop	{r4, pc}

080044d6 <__sclose>:
 80044d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044da:	f000 b809 	b.w	80044f0 <_close_r>

080044de <memset>:
 80044de:	4402      	add	r2, r0
 80044e0:	4603      	mov	r3, r0
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d100      	bne.n	80044e8 <memset+0xa>
 80044e6:	4770      	bx	lr
 80044e8:	f803 1b01 	strb.w	r1, [r3], #1
 80044ec:	e7f9      	b.n	80044e2 <memset+0x4>
	...

080044f0 <_close_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d06      	ldr	r5, [pc, #24]	; (800450c <_close_r+0x1c>)
 80044f4:	2300      	movs	r3, #0
 80044f6:	4604      	mov	r4, r0
 80044f8:	4608      	mov	r0, r1
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	f7ff fd0e 	bl	8003f1c <_close>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d102      	bne.n	800450a <_close_r+0x1a>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	b103      	cbz	r3, 800450a <_close_r+0x1a>
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	20000b94 	.word	0x20000b94

08004510 <_lseek_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4d07      	ldr	r5, [pc, #28]	; (8004530 <_lseek_r+0x20>)
 8004514:	4604      	mov	r4, r0
 8004516:	4608      	mov	r0, r1
 8004518:	4611      	mov	r1, r2
 800451a:	2200      	movs	r2, #0
 800451c:	602a      	str	r2, [r5, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f7ff fcb9 	bl	8003e96 <_lseek>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_lseek_r+0x1e>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_lseek_r+0x1e>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000b94 	.word	0x20000b94

08004534 <_read_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d07      	ldr	r5, [pc, #28]	; (8004554 <_read_r+0x20>)
 8004538:	4604      	mov	r4, r0
 800453a:	4608      	mov	r0, r1
 800453c:	4611      	mov	r1, r2
 800453e:	2200      	movs	r2, #0
 8004540:	602a      	str	r2, [r5, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	f7ff fc4f 	bl	8003de6 <_read>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_read_r+0x1e>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_read_r+0x1e>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	20000b94 	.word	0x20000b94

08004558 <_write_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d07      	ldr	r5, [pc, #28]	; (8004578 <_write_r+0x20>)
 800455c:	4604      	mov	r4, r0
 800455e:	4608      	mov	r0, r1
 8004560:	4611      	mov	r1, r2
 8004562:	2200      	movs	r2, #0
 8004564:	602a      	str	r2, [r5, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	f7ff fca7 	bl	8003eba <_write>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_write_r+0x1e>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b103      	cbz	r3, 8004576 <_write_r+0x1e>
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	20000b94 	.word	0x20000b94

0800457c <__errno>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <__errno+0x8>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	2000006c 	.word	0x2000006c

08004588 <__libc_init_array>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	4d0d      	ldr	r5, [pc, #52]	; (80045c0 <__libc_init_array+0x38>)
 800458c:	4c0d      	ldr	r4, [pc, #52]	; (80045c4 <__libc_init_array+0x3c>)
 800458e:	1b64      	subs	r4, r4, r5
 8004590:	10a4      	asrs	r4, r4, #2
 8004592:	2600      	movs	r6, #0
 8004594:	42a6      	cmp	r6, r4
 8004596:	d109      	bne.n	80045ac <__libc_init_array+0x24>
 8004598:	4d0b      	ldr	r5, [pc, #44]	; (80045c8 <__libc_init_array+0x40>)
 800459a:	4c0c      	ldr	r4, [pc, #48]	; (80045cc <__libc_init_array+0x44>)
 800459c:	f000 fdc0 	bl	8005120 <_init>
 80045a0:	1b64      	subs	r4, r4, r5
 80045a2:	10a4      	asrs	r4, r4, #2
 80045a4:	2600      	movs	r6, #0
 80045a6:	42a6      	cmp	r6, r4
 80045a8:	d105      	bne.n	80045b6 <__libc_init_array+0x2e>
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b0:	4798      	blx	r3
 80045b2:	3601      	adds	r6, #1
 80045b4:	e7ee      	b.n	8004594 <__libc_init_array+0xc>
 80045b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ba:	4798      	blx	r3
 80045bc:	3601      	adds	r6, #1
 80045be:	e7f2      	b.n	80045a6 <__libc_init_array+0x1e>
 80045c0:	080051b4 	.word	0x080051b4
 80045c4:	080051b4 	.word	0x080051b4
 80045c8:	080051b4 	.word	0x080051b4
 80045cc:	080051b8 	.word	0x080051b8

080045d0 <__retarget_lock_init_recursive>:
 80045d0:	4770      	bx	lr

080045d2 <__retarget_lock_acquire_recursive>:
 80045d2:	4770      	bx	lr

080045d4 <__retarget_lock_release_recursive>:
 80045d4:	4770      	bx	lr
	...

080045d8 <_free_r>:
 80045d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045da:	2900      	cmp	r1, #0
 80045dc:	d044      	beq.n	8004668 <_free_r+0x90>
 80045de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e2:	9001      	str	r0, [sp, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f1a1 0404 	sub.w	r4, r1, #4
 80045ea:	bfb8      	it	lt
 80045ec:	18e4      	addlt	r4, r4, r3
 80045ee:	f000 f8df 	bl	80047b0 <__malloc_lock>
 80045f2:	4a1e      	ldr	r2, [pc, #120]	; (800466c <_free_r+0x94>)
 80045f4:	9801      	ldr	r0, [sp, #4]
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	b933      	cbnz	r3, 8004608 <_free_r+0x30>
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	6014      	str	r4, [r2, #0]
 80045fe:	b003      	add	sp, #12
 8004600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004604:	f000 b8da 	b.w	80047bc <__malloc_unlock>
 8004608:	42a3      	cmp	r3, r4
 800460a:	d908      	bls.n	800461e <_free_r+0x46>
 800460c:	6825      	ldr	r5, [r4, #0]
 800460e:	1961      	adds	r1, r4, r5
 8004610:	428b      	cmp	r3, r1
 8004612:	bf01      	itttt	eq
 8004614:	6819      	ldreq	r1, [r3, #0]
 8004616:	685b      	ldreq	r3, [r3, #4]
 8004618:	1949      	addeq	r1, r1, r5
 800461a:	6021      	streq	r1, [r4, #0]
 800461c:	e7ed      	b.n	80045fa <_free_r+0x22>
 800461e:	461a      	mov	r2, r3
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	b10b      	cbz	r3, 8004628 <_free_r+0x50>
 8004624:	42a3      	cmp	r3, r4
 8004626:	d9fa      	bls.n	800461e <_free_r+0x46>
 8004628:	6811      	ldr	r1, [r2, #0]
 800462a:	1855      	adds	r5, r2, r1
 800462c:	42a5      	cmp	r5, r4
 800462e:	d10b      	bne.n	8004648 <_free_r+0x70>
 8004630:	6824      	ldr	r4, [r4, #0]
 8004632:	4421      	add	r1, r4
 8004634:	1854      	adds	r4, r2, r1
 8004636:	42a3      	cmp	r3, r4
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	d1e0      	bne.n	80045fe <_free_r+0x26>
 800463c:	681c      	ldr	r4, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	6053      	str	r3, [r2, #4]
 8004642:	440c      	add	r4, r1
 8004644:	6014      	str	r4, [r2, #0]
 8004646:	e7da      	b.n	80045fe <_free_r+0x26>
 8004648:	d902      	bls.n	8004650 <_free_r+0x78>
 800464a:	230c      	movs	r3, #12
 800464c:	6003      	str	r3, [r0, #0]
 800464e:	e7d6      	b.n	80045fe <_free_r+0x26>
 8004650:	6825      	ldr	r5, [r4, #0]
 8004652:	1961      	adds	r1, r4, r5
 8004654:	428b      	cmp	r3, r1
 8004656:	bf04      	itt	eq
 8004658:	6819      	ldreq	r1, [r3, #0]
 800465a:	685b      	ldreq	r3, [r3, #4]
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	bf04      	itt	eq
 8004660:	1949      	addeq	r1, r1, r5
 8004662:	6021      	streq	r1, [r4, #0]
 8004664:	6054      	str	r4, [r2, #4]
 8004666:	e7ca      	b.n	80045fe <_free_r+0x26>
 8004668:	b003      	add	sp, #12
 800466a:	bd30      	pop	{r4, r5, pc}
 800466c:	20000b9c 	.word	0x20000b9c

08004670 <sbrk_aligned>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4e0e      	ldr	r6, [pc, #56]	; (80046ac <sbrk_aligned+0x3c>)
 8004674:	460c      	mov	r4, r1
 8004676:	6831      	ldr	r1, [r6, #0]
 8004678:	4605      	mov	r5, r0
 800467a:	b911      	cbnz	r1, 8004682 <sbrk_aligned+0x12>
 800467c:	f000 fcbc 	bl	8004ff8 <_sbrk_r>
 8004680:	6030      	str	r0, [r6, #0]
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 fcb7 	bl	8004ff8 <_sbrk_r>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d00a      	beq.n	80046a4 <sbrk_aligned+0x34>
 800468e:	1cc4      	adds	r4, r0, #3
 8004690:	f024 0403 	bic.w	r4, r4, #3
 8004694:	42a0      	cmp	r0, r4
 8004696:	d007      	beq.n	80046a8 <sbrk_aligned+0x38>
 8004698:	1a21      	subs	r1, r4, r0
 800469a:	4628      	mov	r0, r5
 800469c:	f000 fcac 	bl	8004ff8 <_sbrk_r>
 80046a0:	3001      	adds	r0, #1
 80046a2:	d101      	bne.n	80046a8 <sbrk_aligned+0x38>
 80046a4:	f04f 34ff 	mov.w	r4, #4294967295
 80046a8:	4620      	mov	r0, r4
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	20000ba0 	.word	0x20000ba0

080046b0 <_malloc_r>:
 80046b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b4:	1ccd      	adds	r5, r1, #3
 80046b6:	f025 0503 	bic.w	r5, r5, #3
 80046ba:	3508      	adds	r5, #8
 80046bc:	2d0c      	cmp	r5, #12
 80046be:	bf38      	it	cc
 80046c0:	250c      	movcc	r5, #12
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	4607      	mov	r7, r0
 80046c6:	db01      	blt.n	80046cc <_malloc_r+0x1c>
 80046c8:	42a9      	cmp	r1, r5
 80046ca:	d905      	bls.n	80046d8 <_malloc_r+0x28>
 80046cc:	230c      	movs	r3, #12
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	2600      	movs	r6, #0
 80046d2:	4630      	mov	r0, r6
 80046d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047ac <_malloc_r+0xfc>
 80046dc:	f000 f868 	bl	80047b0 <__malloc_lock>
 80046e0:	f8d8 3000 	ldr.w	r3, [r8]
 80046e4:	461c      	mov	r4, r3
 80046e6:	bb5c      	cbnz	r4, 8004740 <_malloc_r+0x90>
 80046e8:	4629      	mov	r1, r5
 80046ea:	4638      	mov	r0, r7
 80046ec:	f7ff ffc0 	bl	8004670 <sbrk_aligned>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	4604      	mov	r4, r0
 80046f4:	d155      	bne.n	80047a2 <_malloc_r+0xf2>
 80046f6:	f8d8 4000 	ldr.w	r4, [r8]
 80046fa:	4626      	mov	r6, r4
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	d145      	bne.n	800478c <_malloc_r+0xdc>
 8004700:	2c00      	cmp	r4, #0
 8004702:	d048      	beq.n	8004796 <_malloc_r+0xe6>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	4631      	mov	r1, r6
 8004708:	4638      	mov	r0, r7
 800470a:	eb04 0903 	add.w	r9, r4, r3
 800470e:	f000 fc73 	bl	8004ff8 <_sbrk_r>
 8004712:	4581      	cmp	r9, r0
 8004714:	d13f      	bne.n	8004796 <_malloc_r+0xe6>
 8004716:	6821      	ldr	r1, [r4, #0]
 8004718:	1a6d      	subs	r5, r5, r1
 800471a:	4629      	mov	r1, r5
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff ffa7 	bl	8004670 <sbrk_aligned>
 8004722:	3001      	adds	r0, #1
 8004724:	d037      	beq.n	8004796 <_malloc_r+0xe6>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	442b      	add	r3, r5
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	f8d8 3000 	ldr.w	r3, [r8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d038      	beq.n	80047a6 <_malloc_r+0xf6>
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	42a2      	cmp	r2, r4
 8004738:	d12b      	bne.n	8004792 <_malloc_r+0xe2>
 800473a:	2200      	movs	r2, #0
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	e00f      	b.n	8004760 <_malloc_r+0xb0>
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	1b52      	subs	r2, r2, r5
 8004744:	d41f      	bmi.n	8004786 <_malloc_r+0xd6>
 8004746:	2a0b      	cmp	r2, #11
 8004748:	d917      	bls.n	800477a <_malloc_r+0xca>
 800474a:	1961      	adds	r1, r4, r5
 800474c:	42a3      	cmp	r3, r4
 800474e:	6025      	str	r5, [r4, #0]
 8004750:	bf18      	it	ne
 8004752:	6059      	strne	r1, [r3, #4]
 8004754:	6863      	ldr	r3, [r4, #4]
 8004756:	bf08      	it	eq
 8004758:	f8c8 1000 	streq.w	r1, [r8]
 800475c:	5162      	str	r2, [r4, r5]
 800475e:	604b      	str	r3, [r1, #4]
 8004760:	4638      	mov	r0, r7
 8004762:	f104 060b 	add.w	r6, r4, #11
 8004766:	f000 f829 	bl	80047bc <__malloc_unlock>
 800476a:	f026 0607 	bic.w	r6, r6, #7
 800476e:	1d23      	adds	r3, r4, #4
 8004770:	1af2      	subs	r2, r6, r3
 8004772:	d0ae      	beq.n	80046d2 <_malloc_r+0x22>
 8004774:	1b9b      	subs	r3, r3, r6
 8004776:	50a3      	str	r3, [r4, r2]
 8004778:	e7ab      	b.n	80046d2 <_malloc_r+0x22>
 800477a:	42a3      	cmp	r3, r4
 800477c:	6862      	ldr	r2, [r4, #4]
 800477e:	d1dd      	bne.n	800473c <_malloc_r+0x8c>
 8004780:	f8c8 2000 	str.w	r2, [r8]
 8004784:	e7ec      	b.n	8004760 <_malloc_r+0xb0>
 8004786:	4623      	mov	r3, r4
 8004788:	6864      	ldr	r4, [r4, #4]
 800478a:	e7ac      	b.n	80046e6 <_malloc_r+0x36>
 800478c:	4634      	mov	r4, r6
 800478e:	6876      	ldr	r6, [r6, #4]
 8004790:	e7b4      	b.n	80046fc <_malloc_r+0x4c>
 8004792:	4613      	mov	r3, r2
 8004794:	e7cc      	b.n	8004730 <_malloc_r+0x80>
 8004796:	230c      	movs	r3, #12
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	4638      	mov	r0, r7
 800479c:	f000 f80e 	bl	80047bc <__malloc_unlock>
 80047a0:	e797      	b.n	80046d2 <_malloc_r+0x22>
 80047a2:	6025      	str	r5, [r4, #0]
 80047a4:	e7dc      	b.n	8004760 <_malloc_r+0xb0>
 80047a6:	605b      	str	r3, [r3, #4]
 80047a8:	deff      	udf	#255	; 0xff
 80047aa:	bf00      	nop
 80047ac:	20000b9c 	.word	0x20000b9c

080047b0 <__malloc_lock>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__malloc_lock+0x8>)
 80047b2:	f7ff bf0e 	b.w	80045d2 <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	20000b98 	.word	0x20000b98

080047bc <__malloc_unlock>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__malloc_unlock+0x8>)
 80047be:	f7ff bf09 	b.w	80045d4 <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	20000b98 	.word	0x20000b98

080047c8 <__sfputc_r>:
 80047c8:	6893      	ldr	r3, [r2, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	b410      	push	{r4}
 80047d0:	6093      	str	r3, [r2, #8]
 80047d2:	da08      	bge.n	80047e6 <__sfputc_r+0x1e>
 80047d4:	6994      	ldr	r4, [r2, #24]
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	db01      	blt.n	80047de <__sfputc_r+0x16>
 80047da:	290a      	cmp	r1, #10
 80047dc:	d103      	bne.n	80047e6 <__sfputc_r+0x1e>
 80047de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047e2:	f000 bb73 	b.w	8004ecc <__swbuf_r>
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	1c58      	adds	r0, r3, #1
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	7019      	strb	r1, [r3, #0]
 80047ee:	4608      	mov	r0, r1
 80047f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <__sfputs_r>:
 80047f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f8:	4606      	mov	r6, r0
 80047fa:	460f      	mov	r7, r1
 80047fc:	4614      	mov	r4, r2
 80047fe:	18d5      	adds	r5, r2, r3
 8004800:	42ac      	cmp	r4, r5
 8004802:	d101      	bne.n	8004808 <__sfputs_r+0x12>
 8004804:	2000      	movs	r0, #0
 8004806:	e007      	b.n	8004818 <__sfputs_r+0x22>
 8004808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480c:	463a      	mov	r2, r7
 800480e:	4630      	mov	r0, r6
 8004810:	f7ff ffda 	bl	80047c8 <__sfputc_r>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d1f3      	bne.n	8004800 <__sfputs_r+0xa>
 8004818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800481c <_vfiprintf_r>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	460d      	mov	r5, r1
 8004822:	b09d      	sub	sp, #116	; 0x74
 8004824:	4614      	mov	r4, r2
 8004826:	4698      	mov	r8, r3
 8004828:	4606      	mov	r6, r0
 800482a:	b118      	cbz	r0, 8004834 <_vfiprintf_r+0x18>
 800482c:	6a03      	ldr	r3, [r0, #32]
 800482e:	b90b      	cbnz	r3, 8004834 <_vfiprintf_r+0x18>
 8004830:	f7ff fdca 	bl	80043c8 <__sinit>
 8004834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004836:	07d9      	lsls	r1, r3, #31
 8004838:	d405      	bmi.n	8004846 <_vfiprintf_r+0x2a>
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	059a      	lsls	r2, r3, #22
 800483e:	d402      	bmi.n	8004846 <_vfiprintf_r+0x2a>
 8004840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004842:	f7ff fec6 	bl	80045d2 <__retarget_lock_acquire_recursive>
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	d501      	bpl.n	8004850 <_vfiprintf_r+0x34>
 800484c:	692b      	ldr	r3, [r5, #16]
 800484e:	b99b      	cbnz	r3, 8004878 <_vfiprintf_r+0x5c>
 8004850:	4629      	mov	r1, r5
 8004852:	4630      	mov	r0, r6
 8004854:	f000 fb78 	bl	8004f48 <__swsetup_r>
 8004858:	b170      	cbz	r0, 8004878 <_vfiprintf_r+0x5c>
 800485a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800485c:	07dc      	lsls	r4, r3, #31
 800485e:	d504      	bpl.n	800486a <_vfiprintf_r+0x4e>
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	b01d      	add	sp, #116	; 0x74
 8004866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486a:	89ab      	ldrh	r3, [r5, #12]
 800486c:	0598      	lsls	r0, r3, #22
 800486e:	d4f7      	bmi.n	8004860 <_vfiprintf_r+0x44>
 8004870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004872:	f7ff feaf 	bl	80045d4 <__retarget_lock_release_recursive>
 8004876:	e7f3      	b.n	8004860 <_vfiprintf_r+0x44>
 8004878:	2300      	movs	r3, #0
 800487a:	9309      	str	r3, [sp, #36]	; 0x24
 800487c:	2320      	movs	r3, #32
 800487e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004882:	f8cd 800c 	str.w	r8, [sp, #12]
 8004886:	2330      	movs	r3, #48	; 0x30
 8004888:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004a3c <_vfiprintf_r+0x220>
 800488c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004890:	f04f 0901 	mov.w	r9, #1
 8004894:	4623      	mov	r3, r4
 8004896:	469a      	mov	sl, r3
 8004898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800489c:	b10a      	cbz	r2, 80048a2 <_vfiprintf_r+0x86>
 800489e:	2a25      	cmp	r2, #37	; 0x25
 80048a0:	d1f9      	bne.n	8004896 <_vfiprintf_r+0x7a>
 80048a2:	ebba 0b04 	subs.w	fp, sl, r4
 80048a6:	d00b      	beq.n	80048c0 <_vfiprintf_r+0xa4>
 80048a8:	465b      	mov	r3, fp
 80048aa:	4622      	mov	r2, r4
 80048ac:	4629      	mov	r1, r5
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ffa1 	bl	80047f6 <__sfputs_r>
 80048b4:	3001      	adds	r0, #1
 80048b6:	f000 80a9 	beq.w	8004a0c <_vfiprintf_r+0x1f0>
 80048ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048bc:	445a      	add	r2, fp
 80048be:	9209      	str	r2, [sp, #36]	; 0x24
 80048c0:	f89a 3000 	ldrb.w	r3, [sl]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80a1 	beq.w	8004a0c <_vfiprintf_r+0x1f0>
 80048ca:	2300      	movs	r3, #0
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048d4:	f10a 0a01 	add.w	sl, sl, #1
 80048d8:	9304      	str	r3, [sp, #16]
 80048da:	9307      	str	r3, [sp, #28]
 80048dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e0:	931a      	str	r3, [sp, #104]	; 0x68
 80048e2:	4654      	mov	r4, sl
 80048e4:	2205      	movs	r2, #5
 80048e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ea:	4854      	ldr	r0, [pc, #336]	; (8004a3c <_vfiprintf_r+0x220>)
 80048ec:	f7fb fc80 	bl	80001f0 <memchr>
 80048f0:	9a04      	ldr	r2, [sp, #16]
 80048f2:	b9d8      	cbnz	r0, 800492c <_vfiprintf_r+0x110>
 80048f4:	06d1      	lsls	r1, r2, #27
 80048f6:	bf44      	itt	mi
 80048f8:	2320      	movmi	r3, #32
 80048fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048fe:	0713      	lsls	r3, r2, #28
 8004900:	bf44      	itt	mi
 8004902:	232b      	movmi	r3, #43	; 0x2b
 8004904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004908:	f89a 3000 	ldrb.w	r3, [sl]
 800490c:	2b2a      	cmp	r3, #42	; 0x2a
 800490e:	d015      	beq.n	800493c <_vfiprintf_r+0x120>
 8004910:	9a07      	ldr	r2, [sp, #28]
 8004912:	4654      	mov	r4, sl
 8004914:	2000      	movs	r0, #0
 8004916:	f04f 0c0a 	mov.w	ip, #10
 800491a:	4621      	mov	r1, r4
 800491c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004920:	3b30      	subs	r3, #48	; 0x30
 8004922:	2b09      	cmp	r3, #9
 8004924:	d94d      	bls.n	80049c2 <_vfiprintf_r+0x1a6>
 8004926:	b1b0      	cbz	r0, 8004956 <_vfiprintf_r+0x13a>
 8004928:	9207      	str	r2, [sp, #28]
 800492a:	e014      	b.n	8004956 <_vfiprintf_r+0x13a>
 800492c:	eba0 0308 	sub.w	r3, r0, r8
 8004930:	fa09 f303 	lsl.w	r3, r9, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	9304      	str	r3, [sp, #16]
 8004938:	46a2      	mov	sl, r4
 800493a:	e7d2      	b.n	80048e2 <_vfiprintf_r+0xc6>
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	1d19      	adds	r1, r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	9103      	str	r1, [sp, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfbb      	ittet	lt
 8004948:	425b      	neglt	r3, r3
 800494a:	f042 0202 	orrlt.w	r2, r2, #2
 800494e:	9307      	strge	r3, [sp, #28]
 8004950:	9307      	strlt	r3, [sp, #28]
 8004952:	bfb8      	it	lt
 8004954:	9204      	strlt	r2, [sp, #16]
 8004956:	7823      	ldrb	r3, [r4, #0]
 8004958:	2b2e      	cmp	r3, #46	; 0x2e
 800495a:	d10c      	bne.n	8004976 <_vfiprintf_r+0x15a>
 800495c:	7863      	ldrb	r3, [r4, #1]
 800495e:	2b2a      	cmp	r3, #42	; 0x2a
 8004960:	d134      	bne.n	80049cc <_vfiprintf_r+0x1b0>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	9203      	str	r2, [sp, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfb8      	it	lt
 800496e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004972:	3402      	adds	r4, #2
 8004974:	9305      	str	r3, [sp, #20]
 8004976:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a4c <_vfiprintf_r+0x230>
 800497a:	7821      	ldrb	r1, [r4, #0]
 800497c:	2203      	movs	r2, #3
 800497e:	4650      	mov	r0, sl
 8004980:	f7fb fc36 	bl	80001f0 <memchr>
 8004984:	b138      	cbz	r0, 8004996 <_vfiprintf_r+0x17a>
 8004986:	9b04      	ldr	r3, [sp, #16]
 8004988:	eba0 000a 	sub.w	r0, r0, sl
 800498c:	2240      	movs	r2, #64	; 0x40
 800498e:	4082      	lsls	r2, r0
 8004990:	4313      	orrs	r3, r2
 8004992:	3401      	adds	r4, #1
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499a:	4829      	ldr	r0, [pc, #164]	; (8004a40 <_vfiprintf_r+0x224>)
 800499c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a0:	2206      	movs	r2, #6
 80049a2:	f7fb fc25 	bl	80001f0 <memchr>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d03f      	beq.n	8004a2a <_vfiprintf_r+0x20e>
 80049aa:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <_vfiprintf_r+0x228>)
 80049ac:	bb1b      	cbnz	r3, 80049f6 <_vfiprintf_r+0x1da>
 80049ae:	9b03      	ldr	r3, [sp, #12]
 80049b0:	3307      	adds	r3, #7
 80049b2:	f023 0307 	bic.w	r3, r3, #7
 80049b6:	3308      	adds	r3, #8
 80049b8:	9303      	str	r3, [sp, #12]
 80049ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049bc:	443b      	add	r3, r7
 80049be:	9309      	str	r3, [sp, #36]	; 0x24
 80049c0:	e768      	b.n	8004894 <_vfiprintf_r+0x78>
 80049c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049c6:	460c      	mov	r4, r1
 80049c8:	2001      	movs	r0, #1
 80049ca:	e7a6      	b.n	800491a <_vfiprintf_r+0xfe>
 80049cc:	2300      	movs	r3, #0
 80049ce:	3401      	adds	r4, #1
 80049d0:	9305      	str	r3, [sp, #20]
 80049d2:	4619      	mov	r1, r3
 80049d4:	f04f 0c0a 	mov.w	ip, #10
 80049d8:	4620      	mov	r0, r4
 80049da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049de:	3a30      	subs	r2, #48	; 0x30
 80049e0:	2a09      	cmp	r2, #9
 80049e2:	d903      	bls.n	80049ec <_vfiprintf_r+0x1d0>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0c6      	beq.n	8004976 <_vfiprintf_r+0x15a>
 80049e8:	9105      	str	r1, [sp, #20]
 80049ea:	e7c4      	b.n	8004976 <_vfiprintf_r+0x15a>
 80049ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80049f0:	4604      	mov	r4, r0
 80049f2:	2301      	movs	r3, #1
 80049f4:	e7f0      	b.n	80049d8 <_vfiprintf_r+0x1bc>
 80049f6:	ab03      	add	r3, sp, #12
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	462a      	mov	r2, r5
 80049fc:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <_vfiprintf_r+0x22c>)
 80049fe:	a904      	add	r1, sp, #16
 8004a00:	4630      	mov	r0, r6
 8004a02:	f3af 8000 	nop.w
 8004a06:	4607      	mov	r7, r0
 8004a08:	1c78      	adds	r0, r7, #1
 8004a0a:	d1d6      	bne.n	80049ba <_vfiprintf_r+0x19e>
 8004a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a0e:	07d9      	lsls	r1, r3, #31
 8004a10:	d405      	bmi.n	8004a1e <_vfiprintf_r+0x202>
 8004a12:	89ab      	ldrh	r3, [r5, #12]
 8004a14:	059a      	lsls	r2, r3, #22
 8004a16:	d402      	bmi.n	8004a1e <_vfiprintf_r+0x202>
 8004a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a1a:	f7ff fddb 	bl	80045d4 <__retarget_lock_release_recursive>
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	065b      	lsls	r3, r3, #25
 8004a22:	f53f af1d 	bmi.w	8004860 <_vfiprintf_r+0x44>
 8004a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a28:	e71c      	b.n	8004864 <_vfiprintf_r+0x48>
 8004a2a:	ab03      	add	r3, sp, #12
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	462a      	mov	r2, r5
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <_vfiprintf_r+0x22c>)
 8004a32:	a904      	add	r1, sp, #16
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 f879 	bl	8004b2c <_printf_i>
 8004a3a:	e7e4      	b.n	8004a06 <_vfiprintf_r+0x1ea>
 8004a3c:	08005176 	.word	0x08005176
 8004a40:	08005180 	.word	0x08005180
 8004a44:	00000000 	.word	0x00000000
 8004a48:	080047f7 	.word	0x080047f7
 8004a4c:	0800517c 	.word	0x0800517c

08004a50 <_printf_common>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	4616      	mov	r6, r2
 8004a56:	4699      	mov	r9, r3
 8004a58:	688a      	ldr	r2, [r1, #8]
 8004a5a:	690b      	ldr	r3, [r1, #16]
 8004a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	bfb8      	it	lt
 8004a64:	4613      	movlt	r3, r2
 8004a66:	6033      	str	r3, [r6, #0]
 8004a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	b10a      	cbz	r2, 8004a76 <_printf_common+0x26>
 8004a72:	3301      	adds	r3, #1
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	0699      	lsls	r1, r3, #26
 8004a7a:	bf42      	ittt	mi
 8004a7c:	6833      	ldrmi	r3, [r6, #0]
 8004a7e:	3302      	addmi	r3, #2
 8004a80:	6033      	strmi	r3, [r6, #0]
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	f015 0506 	ands.w	r5, r5, #6
 8004a88:	d106      	bne.n	8004a98 <_printf_common+0x48>
 8004a8a:	f104 0a19 	add.w	sl, r4, #25
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	6832      	ldr	r2, [r6, #0]
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	42ab      	cmp	r3, r5
 8004a96:	dc26      	bgt.n	8004ae6 <_printf_common+0x96>
 8004a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a9c:	1e13      	subs	r3, r2, #0
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	bf18      	it	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	0692      	lsls	r2, r2, #26
 8004aa6:	d42b      	bmi.n	8004b00 <_printf_common+0xb0>
 8004aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aac:	4649      	mov	r1, r9
 8004aae:	4638      	mov	r0, r7
 8004ab0:	47c0      	blx	r8
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d01e      	beq.n	8004af4 <_printf_common+0xa4>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	6922      	ldr	r2, [r4, #16]
 8004aba:	f003 0306 	and.w	r3, r3, #6
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf02      	ittt	eq
 8004ac2:	68e5      	ldreq	r5, [r4, #12]
 8004ac4:	6833      	ldreq	r3, [r6, #0]
 8004ac6:	1aed      	subeq	r5, r5, r3
 8004ac8:	68a3      	ldr	r3, [r4, #8]
 8004aca:	bf0c      	ite	eq
 8004acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad0:	2500      	movne	r5, #0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfc4      	itt	gt
 8004ad6:	1a9b      	subgt	r3, r3, r2
 8004ad8:	18ed      	addgt	r5, r5, r3
 8004ada:	2600      	movs	r6, #0
 8004adc:	341a      	adds	r4, #26
 8004ade:	42b5      	cmp	r5, r6
 8004ae0:	d11a      	bne.n	8004b18 <_printf_common+0xc8>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e008      	b.n	8004af8 <_printf_common+0xa8>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4652      	mov	r2, sl
 8004aea:	4649      	mov	r1, r9
 8004aec:	4638      	mov	r0, r7
 8004aee:	47c0      	blx	r8
 8004af0:	3001      	adds	r0, #1
 8004af2:	d103      	bne.n	8004afc <_printf_common+0xac>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7c6      	b.n	8004a8e <_printf_common+0x3e>
 8004b00:	18e1      	adds	r1, r4, r3
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	2030      	movs	r0, #48	; 0x30
 8004b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b0a:	4422      	add	r2, r4
 8004b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b14:	3302      	adds	r3, #2
 8004b16:	e7c7      	b.n	8004aa8 <_printf_common+0x58>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4638      	mov	r0, r7
 8004b20:	47c0      	blx	r8
 8004b22:	3001      	adds	r0, #1
 8004b24:	d0e6      	beq.n	8004af4 <_printf_common+0xa4>
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7d9      	b.n	8004ade <_printf_common+0x8e>
	...

08004b2c <_printf_i>:
 8004b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	7e0f      	ldrb	r7, [r1, #24]
 8004b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b34:	2f78      	cmp	r7, #120	; 0x78
 8004b36:	4691      	mov	r9, r2
 8004b38:	4680      	mov	r8, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	469a      	mov	sl, r3
 8004b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b42:	d807      	bhi.n	8004b54 <_printf_i+0x28>
 8004b44:	2f62      	cmp	r7, #98	; 0x62
 8004b46:	d80a      	bhi.n	8004b5e <_printf_i+0x32>
 8004b48:	2f00      	cmp	r7, #0
 8004b4a:	f000 80d4 	beq.w	8004cf6 <_printf_i+0x1ca>
 8004b4e:	2f58      	cmp	r7, #88	; 0x58
 8004b50:	f000 80c0 	beq.w	8004cd4 <_printf_i+0x1a8>
 8004b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b5c:	e03a      	b.n	8004bd4 <_printf_i+0xa8>
 8004b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b62:	2b15      	cmp	r3, #21
 8004b64:	d8f6      	bhi.n	8004b54 <_printf_i+0x28>
 8004b66:	a101      	add	r1, pc, #4	; (adr r1, 8004b6c <_printf_i+0x40>)
 8004b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b6c:	08004bc5 	.word	0x08004bc5
 8004b70:	08004bd9 	.word	0x08004bd9
 8004b74:	08004b55 	.word	0x08004b55
 8004b78:	08004b55 	.word	0x08004b55
 8004b7c:	08004b55 	.word	0x08004b55
 8004b80:	08004b55 	.word	0x08004b55
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004b55 	.word	0x08004b55
 8004b8c:	08004b55 	.word	0x08004b55
 8004b90:	08004b55 	.word	0x08004b55
 8004b94:	08004b55 	.word	0x08004b55
 8004b98:	08004cdd 	.word	0x08004cdd
 8004b9c:	08004c05 	.word	0x08004c05
 8004ba0:	08004c97 	.word	0x08004c97
 8004ba4:	08004b55 	.word	0x08004b55
 8004ba8:	08004b55 	.word	0x08004b55
 8004bac:	08004cff 	.word	0x08004cff
 8004bb0:	08004b55 	.word	0x08004b55
 8004bb4:	08004c05 	.word	0x08004c05
 8004bb8:	08004b55 	.word	0x08004b55
 8004bbc:	08004b55 	.word	0x08004b55
 8004bc0:	08004c9f 	.word	0x08004c9f
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e09f      	b.n	8004d18 <_printf_i+0x1ec>
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	682b      	ldr	r3, [r5, #0]
 8004bdc:	0607      	lsls	r7, r0, #24
 8004bde:	f103 0104 	add.w	r1, r3, #4
 8004be2:	6029      	str	r1, [r5, #0]
 8004be4:	d501      	bpl.n	8004bea <_printf_i+0xbe>
 8004be6:	681e      	ldr	r6, [r3, #0]
 8004be8:	e003      	b.n	8004bf2 <_printf_i+0xc6>
 8004bea:	0646      	lsls	r6, r0, #25
 8004bec:	d5fb      	bpl.n	8004be6 <_printf_i+0xba>
 8004bee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	da03      	bge.n	8004bfe <_printf_i+0xd2>
 8004bf6:	232d      	movs	r3, #45	; 0x2d
 8004bf8:	4276      	negs	r6, r6
 8004bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bfe:	485a      	ldr	r0, [pc, #360]	; (8004d68 <_printf_i+0x23c>)
 8004c00:	230a      	movs	r3, #10
 8004c02:	e012      	b.n	8004c2a <_printf_i+0xfe>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	6820      	ldr	r0, [r4, #0]
 8004c08:	1d19      	adds	r1, r3, #4
 8004c0a:	6029      	str	r1, [r5, #0]
 8004c0c:	0605      	lsls	r5, r0, #24
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0xe8>
 8004c10:	681e      	ldr	r6, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0xee>
 8004c14:	0641      	lsls	r1, r0, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0xe4>
 8004c18:	881e      	ldrh	r6, [r3, #0]
 8004c1a:	4853      	ldr	r0, [pc, #332]	; (8004d68 <_printf_i+0x23c>)
 8004c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c1e:	bf0c      	ite	eq
 8004c20:	2308      	moveq	r3, #8
 8004c22:	230a      	movne	r3, #10
 8004c24:	2100      	movs	r1, #0
 8004c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c2a:	6865      	ldr	r5, [r4, #4]
 8004c2c:	60a5      	str	r5, [r4, #8]
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	bfa2      	ittt	ge
 8004c32:	6821      	ldrge	r1, [r4, #0]
 8004c34:	f021 0104 	bicge.w	r1, r1, #4
 8004c38:	6021      	strge	r1, [r4, #0]
 8004c3a:	b90e      	cbnz	r6, 8004c40 <_printf_i+0x114>
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	d04b      	beq.n	8004cd8 <_printf_i+0x1ac>
 8004c40:	4615      	mov	r5, r2
 8004c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c46:	fb03 6711 	mls	r7, r3, r1, r6
 8004c4a:	5dc7      	ldrb	r7, [r0, r7]
 8004c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c50:	4637      	mov	r7, r6
 8004c52:	42bb      	cmp	r3, r7
 8004c54:	460e      	mov	r6, r1
 8004c56:	d9f4      	bls.n	8004c42 <_printf_i+0x116>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d10b      	bne.n	8004c74 <_printf_i+0x148>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	07de      	lsls	r6, r3, #31
 8004c60:	d508      	bpl.n	8004c74 <_printf_i+0x148>
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	6861      	ldr	r1, [r4, #4]
 8004c66:	4299      	cmp	r1, r3
 8004c68:	bfde      	ittt	le
 8004c6a:	2330      	movle	r3, #48	; 0x30
 8004c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c74:	1b52      	subs	r2, r2, r5
 8004c76:	6122      	str	r2, [r4, #16]
 8004c78:	f8cd a000 	str.w	sl, [sp]
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	aa03      	add	r2, sp, #12
 8004c80:	4621      	mov	r1, r4
 8004c82:	4640      	mov	r0, r8
 8004c84:	f7ff fee4 	bl	8004a50 <_printf_common>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d14a      	bne.n	8004d22 <_printf_i+0x1f6>
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	b004      	add	sp, #16
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	f043 0320 	orr.w	r3, r3, #32
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	4833      	ldr	r0, [pc, #204]	; (8004d6c <_printf_i+0x240>)
 8004ca0:	2778      	movs	r7, #120	; 0x78
 8004ca2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	6829      	ldr	r1, [r5, #0]
 8004caa:	061f      	lsls	r7, r3, #24
 8004cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cb0:	d402      	bmi.n	8004cb8 <_printf_i+0x18c>
 8004cb2:	065f      	lsls	r7, r3, #25
 8004cb4:	bf48      	it	mi
 8004cb6:	b2b6      	uxthmi	r6, r6
 8004cb8:	07df      	lsls	r7, r3, #31
 8004cba:	bf48      	it	mi
 8004cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc0:	6029      	str	r1, [r5, #0]
 8004cc2:	bf48      	it	mi
 8004cc4:	6023      	strmi	r3, [r4, #0]
 8004cc6:	b91e      	cbnz	r6, 8004cd0 <_printf_i+0x1a4>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	f023 0320 	bic.w	r3, r3, #32
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	e7a7      	b.n	8004c24 <_printf_i+0xf8>
 8004cd4:	4824      	ldr	r0, [pc, #144]	; (8004d68 <_printf_i+0x23c>)
 8004cd6:	e7e4      	b.n	8004ca2 <_printf_i+0x176>
 8004cd8:	4615      	mov	r5, r2
 8004cda:	e7bd      	b.n	8004c58 <_printf_i+0x12c>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	6826      	ldr	r6, [r4, #0]
 8004ce0:	6961      	ldr	r1, [r4, #20]
 8004ce2:	1d18      	adds	r0, r3, #4
 8004ce4:	6028      	str	r0, [r5, #0]
 8004ce6:	0635      	lsls	r5, r6, #24
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	d501      	bpl.n	8004cf0 <_printf_i+0x1c4>
 8004cec:	6019      	str	r1, [r3, #0]
 8004cee:	e002      	b.n	8004cf6 <_printf_i+0x1ca>
 8004cf0:	0670      	lsls	r0, r6, #25
 8004cf2:	d5fb      	bpl.n	8004cec <_printf_i+0x1c0>
 8004cf4:	8019      	strh	r1, [r3, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6123      	str	r3, [r4, #16]
 8004cfa:	4615      	mov	r5, r2
 8004cfc:	e7bc      	b.n	8004c78 <_printf_i+0x14c>
 8004cfe:	682b      	ldr	r3, [r5, #0]
 8004d00:	1d1a      	adds	r2, r3, #4
 8004d02:	602a      	str	r2, [r5, #0]
 8004d04:	681d      	ldr	r5, [r3, #0]
 8004d06:	6862      	ldr	r2, [r4, #4]
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7fb fa70 	bl	80001f0 <memchr>
 8004d10:	b108      	cbz	r0, 8004d16 <_printf_i+0x1ea>
 8004d12:	1b40      	subs	r0, r0, r5
 8004d14:	6060      	str	r0, [r4, #4]
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d20:	e7aa      	b.n	8004c78 <_printf_i+0x14c>
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	462a      	mov	r2, r5
 8004d26:	4649      	mov	r1, r9
 8004d28:	4640      	mov	r0, r8
 8004d2a:	47d0      	blx	sl
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d0ad      	beq.n	8004c8c <_printf_i+0x160>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	079b      	lsls	r3, r3, #30
 8004d34:	d413      	bmi.n	8004d5e <_printf_i+0x232>
 8004d36:	68e0      	ldr	r0, [r4, #12]
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	4298      	cmp	r0, r3
 8004d3c:	bfb8      	it	lt
 8004d3e:	4618      	movlt	r0, r3
 8004d40:	e7a6      	b.n	8004c90 <_printf_i+0x164>
 8004d42:	2301      	movs	r3, #1
 8004d44:	4632      	mov	r2, r6
 8004d46:	4649      	mov	r1, r9
 8004d48:	4640      	mov	r0, r8
 8004d4a:	47d0      	blx	sl
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d09d      	beq.n	8004c8c <_printf_i+0x160>
 8004d50:	3501      	adds	r5, #1
 8004d52:	68e3      	ldr	r3, [r4, #12]
 8004d54:	9903      	ldr	r1, [sp, #12]
 8004d56:	1a5b      	subs	r3, r3, r1
 8004d58:	42ab      	cmp	r3, r5
 8004d5a:	dcf2      	bgt.n	8004d42 <_printf_i+0x216>
 8004d5c:	e7eb      	b.n	8004d36 <_printf_i+0x20a>
 8004d5e:	2500      	movs	r5, #0
 8004d60:	f104 0619 	add.w	r6, r4, #25
 8004d64:	e7f5      	b.n	8004d52 <_printf_i+0x226>
 8004d66:	bf00      	nop
 8004d68:	08005187 	.word	0x08005187
 8004d6c:	08005198 	.word	0x08005198

08004d70 <__sflush_r>:
 8004d70:	898a      	ldrh	r2, [r1, #12]
 8004d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d76:	4605      	mov	r5, r0
 8004d78:	0710      	lsls	r0, r2, #28
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	d458      	bmi.n	8004e30 <__sflush_r+0xc0>
 8004d7e:	684b      	ldr	r3, [r1, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dc05      	bgt.n	8004d90 <__sflush_r+0x20>
 8004d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	dc02      	bgt.n	8004d90 <__sflush_r+0x20>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d92:	2e00      	cmp	r6, #0
 8004d94:	d0f9      	beq.n	8004d8a <__sflush_r+0x1a>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d9c:	682f      	ldr	r7, [r5, #0]
 8004d9e:	6a21      	ldr	r1, [r4, #32]
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	d032      	beq.n	8004e0a <__sflush_r+0x9a>
 8004da4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	075a      	lsls	r2, r3, #29
 8004daa:	d505      	bpl.n	8004db8 <__sflush_r+0x48>
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	1ac0      	subs	r0, r0, r3
 8004db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004db2:	b10b      	cbz	r3, 8004db8 <__sflush_r+0x48>
 8004db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004db6:	1ac0      	subs	r0, r0, r3
 8004db8:	2300      	movs	r3, #0
 8004dba:	4602      	mov	r2, r0
 8004dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dbe:	6a21      	ldr	r1, [r4, #32]
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	47b0      	blx	r6
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	d106      	bne.n	8004dd8 <__sflush_r+0x68>
 8004dca:	6829      	ldr	r1, [r5, #0]
 8004dcc:	291d      	cmp	r1, #29
 8004dce:	d82b      	bhi.n	8004e28 <__sflush_r+0xb8>
 8004dd0:	4a29      	ldr	r2, [pc, #164]	; (8004e78 <__sflush_r+0x108>)
 8004dd2:	410a      	asrs	r2, r1
 8004dd4:	07d6      	lsls	r6, r2, #31
 8004dd6:	d427      	bmi.n	8004e28 <__sflush_r+0xb8>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	6062      	str	r2, [r4, #4]
 8004ddc:	04d9      	lsls	r1, r3, #19
 8004dde:	6922      	ldr	r2, [r4, #16]
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	d504      	bpl.n	8004dee <__sflush_r+0x7e>
 8004de4:	1c42      	adds	r2, r0, #1
 8004de6:	d101      	bne.n	8004dec <__sflush_r+0x7c>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b903      	cbnz	r3, 8004dee <__sflush_r+0x7e>
 8004dec:	6560      	str	r0, [r4, #84]	; 0x54
 8004dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004df0:	602f      	str	r7, [r5, #0]
 8004df2:	2900      	cmp	r1, #0
 8004df4:	d0c9      	beq.n	8004d8a <__sflush_r+0x1a>
 8004df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dfa:	4299      	cmp	r1, r3
 8004dfc:	d002      	beq.n	8004e04 <__sflush_r+0x94>
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f7ff fbea 	bl	80045d8 <_free_r>
 8004e04:	2000      	movs	r0, #0
 8004e06:	6360      	str	r0, [r4, #52]	; 0x34
 8004e08:	e7c0      	b.n	8004d8c <__sflush_r+0x1c>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b0      	blx	r6
 8004e10:	1c41      	adds	r1, r0, #1
 8004e12:	d1c8      	bne.n	8004da6 <__sflush_r+0x36>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0c5      	beq.n	8004da6 <__sflush_r+0x36>
 8004e1a:	2b1d      	cmp	r3, #29
 8004e1c:	d001      	beq.n	8004e22 <__sflush_r+0xb2>
 8004e1e:	2b16      	cmp	r3, #22
 8004e20:	d101      	bne.n	8004e26 <__sflush_r+0xb6>
 8004e22:	602f      	str	r7, [r5, #0]
 8004e24:	e7b1      	b.n	8004d8a <__sflush_r+0x1a>
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	e7ad      	b.n	8004d8c <__sflush_r+0x1c>
 8004e30:	690f      	ldr	r7, [r1, #16]
 8004e32:	2f00      	cmp	r7, #0
 8004e34:	d0a9      	beq.n	8004d8a <__sflush_r+0x1a>
 8004e36:	0793      	lsls	r3, r2, #30
 8004e38:	680e      	ldr	r6, [r1, #0]
 8004e3a:	bf08      	it	eq
 8004e3c:	694b      	ldreq	r3, [r1, #20]
 8004e3e:	600f      	str	r7, [r1, #0]
 8004e40:	bf18      	it	ne
 8004e42:	2300      	movne	r3, #0
 8004e44:	eba6 0807 	sub.w	r8, r6, r7
 8004e48:	608b      	str	r3, [r1, #8]
 8004e4a:	f1b8 0f00 	cmp.w	r8, #0
 8004e4e:	dd9c      	ble.n	8004d8a <__sflush_r+0x1a>
 8004e50:	6a21      	ldr	r1, [r4, #32]
 8004e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e54:	4643      	mov	r3, r8
 8004e56:	463a      	mov	r2, r7
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b0      	blx	r6
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	dc06      	bgt.n	8004e6e <__sflush_r+0xfe>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e78e      	b.n	8004d8c <__sflush_r+0x1c>
 8004e6e:	4407      	add	r7, r0
 8004e70:	eba8 0800 	sub.w	r8, r8, r0
 8004e74:	e7e9      	b.n	8004e4a <__sflush_r+0xda>
 8004e76:	bf00      	nop
 8004e78:	dfbffffe 	.word	0xdfbffffe

08004e7c <_fflush_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	690b      	ldr	r3, [r1, #16]
 8004e80:	4605      	mov	r5, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	b913      	cbnz	r3, 8004e8c <_fflush_r+0x10>
 8004e86:	2500      	movs	r5, #0
 8004e88:	4628      	mov	r0, r5
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	b118      	cbz	r0, 8004e96 <_fflush_r+0x1a>
 8004e8e:	6a03      	ldr	r3, [r0, #32]
 8004e90:	b90b      	cbnz	r3, 8004e96 <_fflush_r+0x1a>
 8004e92:	f7ff fa99 	bl	80043c8 <__sinit>
 8004e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f3      	beq.n	8004e86 <_fflush_r+0xa>
 8004e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ea0:	07d0      	lsls	r0, r2, #31
 8004ea2:	d404      	bmi.n	8004eae <_fflush_r+0x32>
 8004ea4:	0599      	lsls	r1, r3, #22
 8004ea6:	d402      	bmi.n	8004eae <_fflush_r+0x32>
 8004ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eaa:	f7ff fb92 	bl	80045d2 <__retarget_lock_acquire_recursive>
 8004eae:	4628      	mov	r0, r5
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	f7ff ff5d 	bl	8004d70 <__sflush_r>
 8004eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb8:	07da      	lsls	r2, r3, #31
 8004eba:	4605      	mov	r5, r0
 8004ebc:	d4e4      	bmi.n	8004e88 <_fflush_r+0xc>
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	059b      	lsls	r3, r3, #22
 8004ec2:	d4e1      	bmi.n	8004e88 <_fflush_r+0xc>
 8004ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec6:	f7ff fb85 	bl	80045d4 <__retarget_lock_release_recursive>
 8004eca:	e7dd      	b.n	8004e88 <_fflush_r+0xc>

08004ecc <__swbuf_r>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	460e      	mov	r6, r1
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	b118      	cbz	r0, 8004ede <__swbuf_r+0x12>
 8004ed6:	6a03      	ldr	r3, [r0, #32]
 8004ed8:	b90b      	cbnz	r3, 8004ede <__swbuf_r+0x12>
 8004eda:	f7ff fa75 	bl	80043c8 <__sinit>
 8004ede:	69a3      	ldr	r3, [r4, #24]
 8004ee0:	60a3      	str	r3, [r4, #8]
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	071a      	lsls	r2, r3, #28
 8004ee6:	d525      	bpl.n	8004f34 <__swbuf_r+0x68>
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	b31b      	cbz	r3, 8004f34 <__swbuf_r+0x68>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	6922      	ldr	r2, [r4, #16]
 8004ef0:	1a98      	subs	r0, r3, r2
 8004ef2:	6963      	ldr	r3, [r4, #20]
 8004ef4:	b2f6      	uxtb	r6, r6
 8004ef6:	4283      	cmp	r3, r0
 8004ef8:	4637      	mov	r7, r6
 8004efa:	dc04      	bgt.n	8004f06 <__swbuf_r+0x3a>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4628      	mov	r0, r5
 8004f00:	f7ff ffbc 	bl	8004e7c <_fflush_r>
 8004f04:	b9e0      	cbnz	r0, 8004f40 <__swbuf_r+0x74>
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	60a3      	str	r3, [r4, #8]
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	6022      	str	r2, [r4, #0]
 8004f12:	701e      	strb	r6, [r3, #0]
 8004f14:	6962      	ldr	r2, [r4, #20]
 8004f16:	1c43      	adds	r3, r0, #1
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d004      	beq.n	8004f26 <__swbuf_r+0x5a>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	07db      	lsls	r3, r3, #31
 8004f20:	d506      	bpl.n	8004f30 <__swbuf_r+0x64>
 8004f22:	2e0a      	cmp	r6, #10
 8004f24:	d104      	bne.n	8004f30 <__swbuf_r+0x64>
 8004f26:	4621      	mov	r1, r4
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f7ff ffa7 	bl	8004e7c <_fflush_r>
 8004f2e:	b938      	cbnz	r0, 8004f40 <__swbuf_r+0x74>
 8004f30:	4638      	mov	r0, r7
 8004f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f34:	4621      	mov	r1, r4
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 f806 	bl	8004f48 <__swsetup_r>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d0d5      	beq.n	8004eec <__swbuf_r+0x20>
 8004f40:	f04f 37ff 	mov.w	r7, #4294967295
 8004f44:	e7f4      	b.n	8004f30 <__swbuf_r+0x64>
	...

08004f48 <__swsetup_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <__swsetup_r+0xac>)
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	460c      	mov	r4, r1
 8004f52:	b118      	cbz	r0, 8004f5c <__swsetup_r+0x14>
 8004f54:	6a03      	ldr	r3, [r0, #32]
 8004f56:	b90b      	cbnz	r3, 8004f5c <__swsetup_r+0x14>
 8004f58:	f7ff fa36 	bl	80043c8 <__sinit>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f62:	0718      	lsls	r0, r3, #28
 8004f64:	d422      	bmi.n	8004fac <__swsetup_r+0x64>
 8004f66:	06d9      	lsls	r1, r3, #27
 8004f68:	d407      	bmi.n	8004f7a <__swsetup_r+0x32>
 8004f6a:	2309      	movs	r3, #9
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	e034      	b.n	8004fe4 <__swsetup_r+0x9c>
 8004f7a:	0758      	lsls	r0, r3, #29
 8004f7c:	d512      	bpl.n	8004fa4 <__swsetup_r+0x5c>
 8004f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f80:	b141      	cbz	r1, 8004f94 <__swsetup_r+0x4c>
 8004f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f86:	4299      	cmp	r1, r3
 8004f88:	d002      	beq.n	8004f90 <__swsetup_r+0x48>
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f7ff fb24 	bl	80045d8 <_free_r>
 8004f90:	2300      	movs	r3, #0
 8004f92:	6363      	str	r3, [r4, #52]	; 0x34
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6063      	str	r3, [r4, #4]
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f043 0308 	orr.w	r3, r3, #8
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	b94b      	cbnz	r3, 8004fc4 <__swsetup_r+0x7c>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fba:	d003      	beq.n	8004fc4 <__swsetup_r+0x7c>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 f850 	bl	8005064 <__smakebuf_r>
 8004fc4:	89a0      	ldrh	r0, [r4, #12]
 8004fc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fca:	f010 0301 	ands.w	r3, r0, #1
 8004fce:	d00a      	beq.n	8004fe6 <__swsetup_r+0x9e>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	6963      	ldr	r3, [r4, #20]
 8004fd6:	425b      	negs	r3, r3
 8004fd8:	61a3      	str	r3, [r4, #24]
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	b943      	cbnz	r3, 8004ff0 <__swsetup_r+0xa8>
 8004fde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fe2:	d1c4      	bne.n	8004f6e <__swsetup_r+0x26>
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	0781      	lsls	r1, r0, #30
 8004fe8:	bf58      	it	pl
 8004fea:	6963      	ldrpl	r3, [r4, #20]
 8004fec:	60a3      	str	r3, [r4, #8]
 8004fee:	e7f4      	b.n	8004fda <__swsetup_r+0x92>
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e7f7      	b.n	8004fe4 <__swsetup_r+0x9c>
 8004ff4:	2000006c 	.word	0x2000006c

08004ff8 <_sbrk_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d06      	ldr	r5, [pc, #24]	; (8005014 <_sbrk_r+0x1c>)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	f7fb fe8c 	bl	8000d20 <_sbrk>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_sbrk_r+0x1a>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_sbrk_r+0x1a>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000b94 	.word	0x20000b94

08005018 <__swhatbuf_r>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	460c      	mov	r4, r1
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	2900      	cmp	r1, #0
 8005022:	b096      	sub	sp, #88	; 0x58
 8005024:	4615      	mov	r5, r2
 8005026:	461e      	mov	r6, r3
 8005028:	da0d      	bge.n	8005046 <__swhatbuf_r+0x2e>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005030:	f04f 0100 	mov.w	r1, #0
 8005034:	bf0c      	ite	eq
 8005036:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800503a:	2340      	movne	r3, #64	; 0x40
 800503c:	2000      	movs	r0, #0
 800503e:	6031      	str	r1, [r6, #0]
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	b016      	add	sp, #88	; 0x58
 8005044:	bd70      	pop	{r4, r5, r6, pc}
 8005046:	466a      	mov	r2, sp
 8005048:	f000 f848 	bl	80050dc <_fstat_r>
 800504c:	2800      	cmp	r0, #0
 800504e:	dbec      	blt.n	800502a <__swhatbuf_r+0x12>
 8005050:	9901      	ldr	r1, [sp, #4]
 8005052:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005056:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800505a:	4259      	negs	r1, r3
 800505c:	4159      	adcs	r1, r3
 800505e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005062:	e7eb      	b.n	800503c <__swhatbuf_r+0x24>

08005064 <__smakebuf_r>:
 8005064:	898b      	ldrh	r3, [r1, #12]
 8005066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005068:	079d      	lsls	r5, r3, #30
 800506a:	4606      	mov	r6, r0
 800506c:	460c      	mov	r4, r1
 800506e:	d507      	bpl.n	8005080 <__smakebuf_r+0x1c>
 8005070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	2301      	movs	r3, #1
 800507a:	6163      	str	r3, [r4, #20]
 800507c:	b002      	add	sp, #8
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	ab01      	add	r3, sp, #4
 8005082:	466a      	mov	r2, sp
 8005084:	f7ff ffc8 	bl	8005018 <__swhatbuf_r>
 8005088:	9900      	ldr	r1, [sp, #0]
 800508a:	4605      	mov	r5, r0
 800508c:	4630      	mov	r0, r6
 800508e:	f7ff fb0f 	bl	80046b0 <_malloc_r>
 8005092:	b948      	cbnz	r0, 80050a8 <__smakebuf_r+0x44>
 8005094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005098:	059a      	lsls	r2, r3, #22
 800509a:	d4ef      	bmi.n	800507c <__smakebuf_r+0x18>
 800509c:	f023 0303 	bic.w	r3, r3, #3
 80050a0:	f043 0302 	orr.w	r3, r3, #2
 80050a4:	81a3      	strh	r3, [r4, #12]
 80050a6:	e7e3      	b.n	8005070 <__smakebuf_r+0xc>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	6020      	str	r0, [r4, #0]
 80050ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	9b00      	ldr	r3, [sp, #0]
 80050b4:	6163      	str	r3, [r4, #20]
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	6120      	str	r0, [r4, #16]
 80050ba:	b15b      	cbz	r3, 80050d4 <__smakebuf_r+0x70>
 80050bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f81d 	bl	8005100 <_isatty_r>
 80050c6:	b128      	cbz	r0, 80050d4 <__smakebuf_r+0x70>
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	81a3      	strh	r3, [r4, #12]
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	431d      	orrs	r5, r3
 80050d8:	81a5      	strh	r5, [r4, #12]
 80050da:	e7cf      	b.n	800507c <__smakebuf_r+0x18>

080050dc <_fstat_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d07      	ldr	r5, [pc, #28]	; (80050fc <_fstat_r+0x20>)
 80050e0:	2300      	movs	r3, #0
 80050e2:	4604      	mov	r4, r0
 80050e4:	4608      	mov	r0, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	f7fe ff5e 	bl	8003faa <_fstat>
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	d102      	bne.n	80050f8 <_fstat_r+0x1c>
 80050f2:	682b      	ldr	r3, [r5, #0]
 80050f4:	b103      	cbz	r3, 80050f8 <_fstat_r+0x1c>
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	bd38      	pop	{r3, r4, r5, pc}
 80050fa:	bf00      	nop
 80050fc:	20000b94 	.word	0x20000b94

08005100 <_isatty_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d06      	ldr	r5, [pc, #24]	; (800511c <_isatty_r+0x1c>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7ff f8b4 	bl	8004278 <_isatty>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_isatty_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_isatty_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000b94 	.word	0x20000b94

08005120 <_init>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr

0800512c <_fini>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr
